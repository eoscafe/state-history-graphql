type Account implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockIndex: BigInt!
  present: Boolean!
  name: String!
  vmType: Int
  vmVersion: Int
  privileged: Boolean
  lastCodeUpdate: Datetime
  codeVersion: String
  creationDate: Datetime
  code: String
  abi: String
}

"""
A condition to be used against `Account` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AccountCondition {
  """Checks for equality with the object’s `blockIndex` field."""
  blockIndex: BigInt

  """Checks for equality with the object’s `present` field."""
  present: Boolean

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `vmType` field."""
  vmType: Int

  """Checks for equality with the object’s `vmVersion` field."""
  vmVersion: Int

  """Checks for equality with the object’s `privileged` field."""
  privileged: Boolean

  """Checks for equality with the object’s `lastCodeUpdate` field."""
  lastCodeUpdate: Datetime

  """Checks for equality with the object’s `codeVersion` field."""
  codeVersion: String

  """Checks for equality with the object’s `creationDate` field."""
  creationDate: Datetime

  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `abi` field."""
  abi: String
}

"""An input for mutations affecting `Account`"""
input AccountInput {
  blockIndex: BigInt!
  present: Boolean!
  name: String!
  vmType: Int
  vmVersion: Int
  privileged: Boolean
  lastCodeUpdate: Datetime
  codeVersion: String
  creationDate: Datetime
  code: String
  abi: String
}

"""
Represents an update to a `Account`. Fields that are set will be updated.
"""
input AccountPatch {
  blockIndex: BigInt
  present: Boolean
  name: String
  vmType: Int
  vmVersion: Int
  privileged: Boolean
  lastCodeUpdate: Datetime
  codeVersion: String
  creationDate: Datetime
  code: String
  abi: String
}

"""A connection to a list of `Account` values."""
type AccountsConnection {
  """A list of `Account` objects."""
  nodes: [Account]!

  """
  A list of edges which contains the `Account` and cursor to aid in pagination.
  """
  edges: [AccountsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Account` you could get from the connection."""
  totalCount: Int
}

"""A `Account` edge in the connection."""
type AccountsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Account` at the end of the edge."""
  node: Account
}

"""Methods to use when ordering `Account`."""
enum AccountsOrderBy {
  NATURAL
  BLOCK_INDEX_ASC
  BLOCK_INDEX_DESC
  PRESENT_ASC
  PRESENT_DESC
  NAME_ASC
  NAME_DESC
  VM_TYPE_ASC
  VM_TYPE_DESC
  VM_VERSION_ASC
  VM_VERSION_DESC
  PRIVILEGED_ASC
  PRIVILEGED_DESC
  LAST_CODE_UPDATE_ASC
  LAST_CODE_UPDATE_DESC
  CODE_VERSION_ASC
  CODE_VERSION_DESC
  CREATION_DATE_ASC
  CREATION_DATE_DESC
  CODE_ASC
  CODE_DESC
  ABI_ASC
  ABI_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ActionTrace implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockIndex: BigInt!
  transactionId: String!
  actionIndex: Int!
  parentActionIndex: Int
  transactionStatus: TransactionStatusType
  receiptReceiver: String
  receiptActDigest: String
  receiptGlobalSequence: BigFloat
  receiptRecvSequence: BigFloat
  receiptCodeSequence: BigInt
  receiptAbiSequence: BigInt
  account: String
  name: String
  data: String
  contextFree: Boolean
  elapsed: BigInt
  console: String
  except: String
}

type ActionTraceAuthorization implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockIndex: BigInt!
  transactionId: String!
  actionIndex: Int!
  index: Int!
  transactionStatus: TransactionStatusType
  actor: String
  permission: String
}

"""
A condition to be used against `ActionTraceAuthorization` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ActionTraceAuthorizationCondition {
  """Checks for equality with the object’s `blockIndex` field."""
  blockIndex: BigInt

  """Checks for equality with the object’s `transactionId` field."""
  transactionId: String

  """Checks for equality with the object’s `actionIndex` field."""
  actionIndex: Int

  """Checks for equality with the object’s `index` field."""
  index: Int

  """Checks for equality with the object’s `transactionStatus` field."""
  transactionStatus: TransactionStatusType

  """Checks for equality with the object’s `actor` field."""
  actor: String

  """Checks for equality with the object’s `permission` field."""
  permission: String
}

"""An input for mutations affecting `ActionTraceAuthorization`"""
input ActionTraceAuthorizationInput {
  blockIndex: BigInt!
  transactionId: String!
  actionIndex: Int!
  index: Int!
  transactionStatus: TransactionStatusType
  actor: String
  permission: String
}

"""
Represents an update to a `ActionTraceAuthorization`. Fields that are set will be updated.
"""
input ActionTraceAuthorizationPatch {
  blockIndex: BigInt
  transactionId: String
  actionIndex: Int
  index: Int
  transactionStatus: TransactionStatusType
  actor: String
  permission: String
}

"""A connection to a list of `ActionTraceAuthorization` values."""
type ActionTraceAuthorizationsConnection {
  """A list of `ActionTraceAuthorization` objects."""
  nodes: [ActionTraceAuthorization]!

  """
  A list of edges which contains the `ActionTraceAuthorization` and cursor to aid in pagination.
  """
  edges: [ActionTraceAuthorizationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ActionTraceAuthorization` you could get from the connection.
  """
  totalCount: Int
}

"""A `ActionTraceAuthorization` edge in the connection."""
type ActionTraceAuthorizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ActionTraceAuthorization` at the end of the edge."""
  node: ActionTraceAuthorization
}

"""Methods to use when ordering `ActionTraceAuthorization`."""
enum ActionTraceAuthorizationsOrderBy {
  NATURAL
  BLOCK_INDEX_ASC
  BLOCK_INDEX_DESC
  TRANSACTION_ID_ASC
  TRANSACTION_ID_DESC
  ACTION_INDEX_ASC
  ACTION_INDEX_DESC
  INDEX_ASC
  INDEX_DESC
  TRANSACTION_STATUS_ASC
  TRANSACTION_STATUS_DESC
  ACTOR_ASC
  ACTOR_DESC
  PERMISSION_ASC
  PERMISSION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ActionTraceAuthSequence implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockIndex: BigInt!
  transactionId: String!
  actionIndex: Int!
  index: Int!
  transactionStatus: TransactionStatusType
  account: String
  sequence: BigFloat
}

"""
A condition to be used against `ActionTraceAuthSequence` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ActionTraceAuthSequenceCondition {
  """Checks for equality with the object’s `blockIndex` field."""
  blockIndex: BigInt

  """Checks for equality with the object’s `transactionId` field."""
  transactionId: String

  """Checks for equality with the object’s `actionIndex` field."""
  actionIndex: Int

  """Checks for equality with the object’s `index` field."""
  index: Int

  """Checks for equality with the object’s `transactionStatus` field."""
  transactionStatus: TransactionStatusType

  """Checks for equality with the object’s `account` field."""
  account: String

  """Checks for equality with the object’s `sequence` field."""
  sequence: BigFloat
}

"""An input for mutations affecting `ActionTraceAuthSequence`"""
input ActionTraceAuthSequenceInput {
  blockIndex: BigInt!
  transactionId: String!
  actionIndex: Int!
  index: Int!
  transactionStatus: TransactionStatusType
  account: String
  sequence: BigFloat
}

"""
Represents an update to a `ActionTraceAuthSequence`. Fields that are set will be updated.
"""
input ActionTraceAuthSequencePatch {
  blockIndex: BigInt
  transactionId: String
  actionIndex: Int
  index: Int
  transactionStatus: TransactionStatusType
  account: String
  sequence: BigFloat
}

"""A connection to a list of `ActionTraceAuthSequence` values."""
type ActionTraceAuthSequencesConnection {
  """A list of `ActionTraceAuthSequence` objects."""
  nodes: [ActionTraceAuthSequence]!

  """
  A list of edges which contains the `ActionTraceAuthSequence` and cursor to aid in pagination.
  """
  edges: [ActionTraceAuthSequencesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ActionTraceAuthSequence` you could get from the connection.
  """
  totalCount: Int
}

"""A `ActionTraceAuthSequence` edge in the connection."""
type ActionTraceAuthSequencesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ActionTraceAuthSequence` at the end of the edge."""
  node: ActionTraceAuthSequence
}

"""Methods to use when ordering `ActionTraceAuthSequence`."""
enum ActionTraceAuthSequencesOrderBy {
  NATURAL
  BLOCK_INDEX_ASC
  BLOCK_INDEX_DESC
  TRANSACTION_ID_ASC
  TRANSACTION_ID_DESC
  ACTION_INDEX_ASC
  ACTION_INDEX_DESC
  INDEX_ASC
  INDEX_DESC
  TRANSACTION_STATUS_ASC
  TRANSACTION_STATUS_DESC
  ACCOUNT_ASC
  ACCOUNT_DESC
  SEQUENCE_ASC
  SEQUENCE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ActionTrace` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ActionTraceCondition {
  """Checks for equality with the object’s `blockIndex` field."""
  blockIndex: BigInt

  """Checks for equality with the object’s `transactionId` field."""
  transactionId: String

  """Checks for equality with the object’s `actionIndex` field."""
  actionIndex: Int

  """Checks for equality with the object’s `parentActionIndex` field."""
  parentActionIndex: Int

  """Checks for equality with the object’s `transactionStatus` field."""
  transactionStatus: TransactionStatusType

  """Checks for equality with the object’s `receiptReceiver` field."""
  receiptReceiver: String

  """Checks for equality with the object’s `receiptActDigest` field."""
  receiptActDigest: String

  """Checks for equality with the object’s `receiptGlobalSequence` field."""
  receiptGlobalSequence: BigFloat

  """Checks for equality with the object’s `receiptRecvSequence` field."""
  receiptRecvSequence: BigFloat

  """Checks for equality with the object’s `receiptCodeSequence` field."""
  receiptCodeSequence: BigInt

  """Checks for equality with the object’s `receiptAbiSequence` field."""
  receiptAbiSequence: BigInt

  """Checks for equality with the object’s `account` field."""
  account: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `data` field."""
  data: String

  """Checks for equality with the object’s `contextFree` field."""
  contextFree: Boolean

  """Checks for equality with the object’s `elapsed` field."""
  elapsed: BigInt

  """Checks for equality with the object’s `console` field."""
  console: String

  """Checks for equality with the object’s `except` field."""
  except: String
}

"""An input for mutations affecting `ActionTrace`"""
input ActionTraceInput {
  blockIndex: BigInt!
  transactionId: String!
  actionIndex: Int!
  parentActionIndex: Int
  transactionStatus: TransactionStatusType
  receiptReceiver: String
  receiptActDigest: String
  receiptGlobalSequence: BigFloat
  receiptRecvSequence: BigFloat
  receiptCodeSequence: BigInt
  receiptAbiSequence: BigInt
  account: String
  name: String
  data: String
  contextFree: Boolean
  elapsed: BigInt
  console: String
  except: String
}

"""
Represents an update to a `ActionTrace`. Fields that are set will be updated.
"""
input ActionTracePatch {
  blockIndex: BigInt
  transactionId: String
  actionIndex: Int
  parentActionIndex: Int
  transactionStatus: TransactionStatusType
  receiptReceiver: String
  receiptActDigest: String
  receiptGlobalSequence: BigFloat
  receiptRecvSequence: BigFloat
  receiptCodeSequence: BigInt
  receiptAbiSequence: BigInt
  account: String
  name: String
  data: String
  contextFree: Boolean
  elapsed: BigInt
  console: String
  except: String
}

type ActionTraceRamDelta implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockIndex: BigInt!
  transactionId: String!
  actionIndex: Int!
  index: Int!
  transactionStatus: TransactionStatusType
  account: String
  delta: BigInt
}

"""
A condition to be used against `ActionTraceRamDelta` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ActionTraceRamDeltaCondition {
  """Checks for equality with the object’s `blockIndex` field."""
  blockIndex: BigInt

  """Checks for equality with the object’s `transactionId` field."""
  transactionId: String

  """Checks for equality with the object’s `actionIndex` field."""
  actionIndex: Int

  """Checks for equality with the object’s `index` field."""
  index: Int

  """Checks for equality with the object’s `transactionStatus` field."""
  transactionStatus: TransactionStatusType

  """Checks for equality with the object’s `account` field."""
  account: String

  """Checks for equality with the object’s `delta` field."""
  delta: BigInt
}

"""An input for mutations affecting `ActionTraceRamDelta`"""
input ActionTraceRamDeltaInput {
  blockIndex: BigInt!
  transactionId: String!
  actionIndex: Int!
  index: Int!
  transactionStatus: TransactionStatusType
  account: String
  delta: BigInt
}

"""
Represents an update to a `ActionTraceRamDelta`. Fields that are set will be updated.
"""
input ActionTraceRamDeltaPatch {
  blockIndex: BigInt
  transactionId: String
  actionIndex: Int
  index: Int
  transactionStatus: TransactionStatusType
  account: String
  delta: BigInt
}

"""A connection to a list of `ActionTraceRamDelta` values."""
type ActionTraceRamDeltasConnection {
  """A list of `ActionTraceRamDelta` objects."""
  nodes: [ActionTraceRamDelta]!

  """
  A list of edges which contains the `ActionTraceRamDelta` and cursor to aid in pagination.
  """
  edges: [ActionTraceRamDeltasEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ActionTraceRamDelta` you could get from the connection.
  """
  totalCount: Int
}

"""A `ActionTraceRamDelta` edge in the connection."""
type ActionTraceRamDeltasEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ActionTraceRamDelta` at the end of the edge."""
  node: ActionTraceRamDelta
}

"""Methods to use when ordering `ActionTraceRamDelta`."""
enum ActionTraceRamDeltasOrderBy {
  NATURAL
  BLOCK_INDEX_ASC
  BLOCK_INDEX_DESC
  TRANSACTION_ID_ASC
  TRANSACTION_ID_DESC
  ACTION_INDEX_ASC
  ACTION_INDEX_DESC
  INDEX_ASC
  INDEX_DESC
  TRANSACTION_STATUS_ASC
  TRANSACTION_STATUS_DESC
  ACCOUNT_ASC
  ACCOUNT_DESC
  DELTA_ASC
  DELTA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `ActionTrace` values."""
type ActionTracesConnection {
  """A list of `ActionTrace` objects."""
  nodes: [ActionTrace]!

  """
  A list of edges which contains the `ActionTrace` and cursor to aid in pagination.
  """
  edges: [ActionTracesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ActionTrace` you could get from the connection."""
  totalCount: Int
}

"""A `ActionTrace` edge in the connection."""
type ActionTracesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ActionTrace` at the end of the edge."""
  node: ActionTrace
}

"""Methods to use when ordering `ActionTrace`."""
enum ActionTracesOrderBy {
  NATURAL
  BLOCK_INDEX_ASC
  BLOCK_INDEX_DESC
  TRANSACTION_ID_ASC
  TRANSACTION_ID_DESC
  ACTION_INDEX_ASC
  ACTION_INDEX_DESC
  PARENT_ACTION_INDEX_ASC
  PARENT_ACTION_INDEX_DESC
  TRANSACTION_STATUS_ASC
  TRANSACTION_STATUS_DESC
  RECEIPT_RECEIVER_ASC
  RECEIPT_RECEIVER_DESC
  RECEIPT_ACT_DIGEST_ASC
  RECEIPT_ACT_DIGEST_DESC
  RECEIPT_GLOBAL_SEQUENCE_ASC
  RECEIPT_GLOBAL_SEQUENCE_DESC
  RECEIPT_RECV_SEQUENCE_ASC
  RECEIPT_RECV_SEQUENCE_DESC
  RECEIPT_CODE_SEQUENCE_ASC
  RECEIPT_CODE_SEQUENCE_DESC
  RECEIPT_ABI_SEQUENCE_ASC
  RECEIPT_ABI_SEQUENCE_DESC
  ACCOUNT_ASC
  ACCOUNT_DESC
  NAME_ASC
  NAME_DESC
  DATA_ASC
  DATA_DESC
  CONTEXT_FREE_ASC
  CONTEXT_FREE_DESC
  ELAPSED_ASC
  ELAPSED_DESC
  CONSOLE_ASC
  CONSOLE_DESC
  EXCEPT_ASC
  EXCEPT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A signed eight-byte integer. The upper big integer values are greater then the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

type BlockInfo implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockIndex: BigInt!
  blockId: String
  timestamp: Datetime
  producer: String
  confirmed: Int
  previous: String
  transactionMroot: String
  actionMroot: String
  scheduleVersion: BigInt
  newProducersVersion: BigInt
  newProducers: [ProducerKey]
}

"""
A condition to be used against `BlockInfo` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input BlockInfoCondition {
  """Checks for equality with the object’s `blockIndex` field."""
  blockIndex: BigInt

  """Checks for equality with the object’s `blockId` field."""
  blockId: String

  """Checks for equality with the object’s `timestamp` field."""
  timestamp: Datetime

  """Checks for equality with the object’s `producer` field."""
  producer: String

  """Checks for equality with the object’s `confirmed` field."""
  confirmed: Int

  """Checks for equality with the object’s `previous` field."""
  previous: String

  """Checks for equality with the object’s `transactionMroot` field."""
  transactionMroot: String

  """Checks for equality with the object’s `actionMroot` field."""
  actionMroot: String

  """Checks for equality with the object’s `scheduleVersion` field."""
  scheduleVersion: BigInt

  """Checks for equality with the object’s `newProducersVersion` field."""
  newProducersVersion: BigInt

  """Checks for equality with the object’s `newProducers` field."""
  newProducers: [ProducerKeyInput]
}

"""An input for mutations affecting `BlockInfo`"""
input BlockInfoInput {
  blockIndex: BigInt!
  blockId: String
  timestamp: Datetime
  producer: String
  confirmed: Int
  previous: String
  transactionMroot: String
  actionMroot: String
  scheduleVersion: BigInt
  newProducersVersion: BigInt
  newProducers: [ProducerKeyInput]
}

"""
Represents an update to a `BlockInfo`. Fields that are set will be updated.
"""
input BlockInfoPatch {
  blockIndex: BigInt
  blockId: String
  timestamp: Datetime
  producer: String
  confirmed: Int
  previous: String
  transactionMroot: String
  actionMroot: String
  scheduleVersion: BigInt
  newProducersVersion: BigInt
  newProducers: [ProducerKeyInput]
}

"""A connection to a list of `BlockInfo` values."""
type BlockInfosConnection {
  """A list of `BlockInfo` objects."""
  nodes: [BlockInfo]!

  """
  A list of edges which contains the `BlockInfo` and cursor to aid in pagination.
  """
  edges: [BlockInfosEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `BlockInfo` you could get from the connection."""
  totalCount: Int
}

"""A `BlockInfo` edge in the connection."""
type BlockInfosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BlockInfo` at the end of the edge."""
  node: BlockInfo
}

"""Methods to use when ordering `BlockInfo`."""
enum BlockInfosOrderBy {
  NATURAL
  BLOCK_INDEX_ASC
  BLOCK_INDEX_DESC
  BLOCK_ID_ASC
  BLOCK_ID_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  PRODUCER_ASC
  PRODUCER_DESC
  CONFIRMED_ASC
  CONFIRMED_DESC
  PREVIOUS_ASC
  PREVIOUS_DESC
  TRANSACTION_MROOT_ASC
  TRANSACTION_MROOT_DESC
  ACTION_MROOT_ASC
  ACTION_MROOT_DESC
  SCHEDULE_VERSION_ASC
  SCHEDULE_VERSION_DESC
  NEW_PRODUCERS_VERSION_ASC
  NEW_PRODUCERS_VERSION_DESC
  NEW_PRODUCERS_ASC
  NEW_PRODUCERS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ContractIndex128 implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  i128Pkey: BigFloat!
  payer: String
  secondaryKey: BigFloat
}

"""
A condition to be used against `ContractIndex128` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ContractIndex128Condition {
  """Checks for equality with the object’s `blockIndex` field."""
  blockIndex: BigInt

  """Checks for equality with the object’s `present` field."""
  present: Boolean

  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `scope` field."""
  scope: String

  """Checks for equality with the object’s `table` field."""
  table: String

  """Checks for equality with the object’s `i128Pkey` field."""
  i128Pkey: BigFloat

  """Checks for equality with the object’s `payer` field."""
  payer: String

  """Checks for equality with the object’s `secondaryKey` field."""
  secondaryKey: BigFloat
}

"""An input for mutations affecting `ContractIndex128`"""
input ContractIndex128Input {
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  i128Pkey: BigFloat!
  payer: String
  secondaryKey: BigFloat
}

"""
Represents an update to a `ContractIndex128`. Fields that are set will be updated.
"""
input ContractIndex128Patch {
  blockIndex: BigInt
  present: Boolean
  code: String
  scope: String
  table: String
  i128Pkey: BigFloat
  payer: String
  secondaryKey: BigFloat
}

"""A connection to a list of `ContractIndex128` values."""
type ContractIndex128SConnection {
  """A list of `ContractIndex128` objects."""
  nodes: [ContractIndex128]!

  """
  A list of edges which contains the `ContractIndex128` and cursor to aid in pagination.
  """
  edges: [ContractIndex128SEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ContractIndex128` you could get from the connection.
  """
  totalCount: Int
}

"""A `ContractIndex128` edge in the connection."""
type ContractIndex128SEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContractIndex128` at the end of the edge."""
  node: ContractIndex128
}

"""Methods to use when ordering `ContractIndex128`."""
enum ContractIndex128SOrderBy {
  NATURAL
  BLOCK_INDEX_ASC
  BLOCK_INDEX_DESC
  PRESENT_ASC
  PRESENT_DESC
  CODE_ASC
  CODE_DESC
  SCOPE_ASC
  SCOPE_DESC
  TABLE_ASC
  TABLE_DESC
  I128_PKEY_ASC
  I128_PKEY_DESC
  PAYER_ASC
  PAYER_DESC
  SECONDARY_KEY_ASC
  SECONDARY_KEY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ContractIndex256 implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  i256Pkey: BigFloat!
  payer: String
  secondaryKey: String
}

"""
A condition to be used against `ContractIndex256` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ContractIndex256Condition {
  """Checks for equality with the object’s `blockIndex` field."""
  blockIndex: BigInt

  """Checks for equality with the object’s `present` field."""
  present: Boolean

  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `scope` field."""
  scope: String

  """Checks for equality with the object’s `table` field."""
  table: String

  """Checks for equality with the object’s `i256Pkey` field."""
  i256Pkey: BigFloat

  """Checks for equality with the object’s `payer` field."""
  payer: String

  """Checks for equality with the object’s `secondaryKey` field."""
  secondaryKey: String
}

"""An input for mutations affecting `ContractIndex256`"""
input ContractIndex256Input {
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  i256Pkey: BigFloat!
  payer: String
  secondaryKey: String
}

"""
Represents an update to a `ContractIndex256`. Fields that are set will be updated.
"""
input ContractIndex256Patch {
  blockIndex: BigInt
  present: Boolean
  code: String
  scope: String
  table: String
  i256Pkey: BigFloat
  payer: String
  secondaryKey: String
}

"""A connection to a list of `ContractIndex256` values."""
type ContractIndex256SConnection {
  """A list of `ContractIndex256` objects."""
  nodes: [ContractIndex256]!

  """
  A list of edges which contains the `ContractIndex256` and cursor to aid in pagination.
  """
  edges: [ContractIndex256SEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ContractIndex256` you could get from the connection.
  """
  totalCount: Int
}

"""A `ContractIndex256` edge in the connection."""
type ContractIndex256SEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContractIndex256` at the end of the edge."""
  node: ContractIndex256
}

"""Methods to use when ordering `ContractIndex256`."""
enum ContractIndex256SOrderBy {
  NATURAL
  BLOCK_INDEX_ASC
  BLOCK_INDEX_DESC
  PRESENT_ASC
  PRESENT_DESC
  CODE_ASC
  CODE_DESC
  SCOPE_ASC
  SCOPE_DESC
  TABLE_ASC
  TABLE_DESC
  I256_PKEY_ASC
  I256_PKEY_DESC
  PAYER_ASC
  PAYER_DESC
  SECONDARY_KEY_ASC
  SECONDARY_KEY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ContractIndex64 implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  i64Pkey: BigFloat!
  payer: String
  secondaryKey: BigFloat
}

"""
A condition to be used against `ContractIndex64` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ContractIndex64Condition {
  """Checks for equality with the object’s `blockIndex` field."""
  blockIndex: BigInt

  """Checks for equality with the object’s `present` field."""
  present: Boolean

  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `scope` field."""
  scope: String

  """Checks for equality with the object’s `table` field."""
  table: String

  """Checks for equality with the object’s `i64Pkey` field."""
  i64Pkey: BigFloat

  """Checks for equality with the object’s `payer` field."""
  payer: String

  """Checks for equality with the object’s `secondaryKey` field."""
  secondaryKey: BigFloat
}

"""An input for mutations affecting `ContractIndex64`"""
input ContractIndex64Input {
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  i64Pkey: BigFloat!
  payer: String
  secondaryKey: BigFloat
}

"""
Represents an update to a `ContractIndex64`. Fields that are set will be updated.
"""
input ContractIndex64Patch {
  blockIndex: BigInt
  present: Boolean
  code: String
  scope: String
  table: String
  i64Pkey: BigFloat
  payer: String
  secondaryKey: BigFloat
}

"""A connection to a list of `ContractIndex64` values."""
type ContractIndex64SConnection {
  """A list of `ContractIndex64` objects."""
  nodes: [ContractIndex64]!

  """
  A list of edges which contains the `ContractIndex64` and cursor to aid in pagination.
  """
  edges: [ContractIndex64SEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ContractIndex64` you could get from the connection.
  """
  totalCount: Int
}

"""A `ContractIndex64` edge in the connection."""
type ContractIndex64SEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContractIndex64` at the end of the edge."""
  node: ContractIndex64
}

"""Methods to use when ordering `ContractIndex64`."""
enum ContractIndex64SOrderBy {
  NATURAL
  BLOCK_INDEX_ASC
  BLOCK_INDEX_DESC
  PRESENT_ASC
  PRESENT_DESC
  CODE_ASC
  CODE_DESC
  SCOPE_ASC
  SCOPE_DESC
  TABLE_ASC
  TABLE_DESC
  I64_PKEY_ASC
  I64_PKEY_DESC
  PAYER_ASC
  PAYER_DESC
  SECONDARY_KEY_ASC
  SECONDARY_KEY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ContractIndexDouble implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  doublePkey: BigFloat!
  payer: String
  secondaryKey: Float
}

"""
A condition to be used against `ContractIndexDouble` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ContractIndexDoubleCondition {
  """Checks for equality with the object’s `blockIndex` field."""
  blockIndex: BigInt

  """Checks for equality with the object’s `present` field."""
  present: Boolean

  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `scope` field."""
  scope: String

  """Checks for equality with the object’s `table` field."""
  table: String

  """Checks for equality with the object’s `doublePkey` field."""
  doublePkey: BigFloat

  """Checks for equality with the object’s `payer` field."""
  payer: String

  """Checks for equality with the object’s `secondaryKey` field."""
  secondaryKey: Float
}

"""An input for mutations affecting `ContractIndexDouble`"""
input ContractIndexDoubleInput {
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  doublePkey: BigFloat!
  payer: String
  secondaryKey: Float
}

"""
Represents an update to a `ContractIndexDouble`. Fields that are set will be updated.
"""
input ContractIndexDoublePatch {
  blockIndex: BigInt
  present: Boolean
  code: String
  scope: String
  table: String
  doublePkey: BigFloat
  payer: String
  secondaryKey: Float
}

"""A connection to a list of `ContractIndexDouble` values."""
type ContractIndexDoublesConnection {
  """A list of `ContractIndexDouble` objects."""
  nodes: [ContractIndexDouble]!

  """
  A list of edges which contains the `ContractIndexDouble` and cursor to aid in pagination.
  """
  edges: [ContractIndexDoublesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ContractIndexDouble` you could get from the connection.
  """
  totalCount: Int
}

"""A `ContractIndexDouble` edge in the connection."""
type ContractIndexDoublesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContractIndexDouble` at the end of the edge."""
  node: ContractIndexDouble
}

"""Methods to use when ordering `ContractIndexDouble`."""
enum ContractIndexDoublesOrderBy {
  NATURAL
  BLOCK_INDEX_ASC
  BLOCK_INDEX_DESC
  PRESENT_ASC
  PRESENT_DESC
  CODE_ASC
  CODE_DESC
  SCOPE_ASC
  SCOPE_DESC
  TABLE_ASC
  TABLE_DESC
  DOUBLE_PKEY_ASC
  DOUBLE_PKEY_DESC
  PAYER_ASC
  PAYER_DESC
  SECONDARY_KEY_ASC
  SECONDARY_KEY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ContractIndexLongDouble implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  longDoublePkey: BigFloat!
  payer: String
  secondaryKey: String
}

"""
A condition to be used against `ContractIndexLongDouble` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ContractIndexLongDoubleCondition {
  """Checks for equality with the object’s `blockIndex` field."""
  blockIndex: BigInt

  """Checks for equality with the object’s `present` field."""
  present: Boolean

  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `scope` field."""
  scope: String

  """Checks for equality with the object’s `table` field."""
  table: String

  """Checks for equality with the object’s `longDoublePkey` field."""
  longDoublePkey: BigFloat

  """Checks for equality with the object’s `payer` field."""
  payer: String

  """Checks for equality with the object’s `secondaryKey` field."""
  secondaryKey: String
}

"""An input for mutations affecting `ContractIndexLongDouble`"""
input ContractIndexLongDoubleInput {
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  longDoublePkey: BigFloat!
  payer: String
  secondaryKey: String
}

"""
Represents an update to a `ContractIndexLongDouble`. Fields that are set will be updated.
"""
input ContractIndexLongDoublePatch {
  blockIndex: BigInt
  present: Boolean
  code: String
  scope: String
  table: String
  longDoublePkey: BigFloat
  payer: String
  secondaryKey: String
}

"""A connection to a list of `ContractIndexLongDouble` values."""
type ContractIndexLongDoublesConnection {
  """A list of `ContractIndexLongDouble` objects."""
  nodes: [ContractIndexLongDouble]!

  """
  A list of edges which contains the `ContractIndexLongDouble` and cursor to aid in pagination.
  """
  edges: [ContractIndexLongDoublesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ContractIndexLongDouble` you could get from the connection.
  """
  totalCount: Int
}

"""A `ContractIndexLongDouble` edge in the connection."""
type ContractIndexLongDoublesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContractIndexLongDouble` at the end of the edge."""
  node: ContractIndexLongDouble
}

"""Methods to use when ordering `ContractIndexLongDouble`."""
enum ContractIndexLongDoublesOrderBy {
  NATURAL
  BLOCK_INDEX_ASC
  BLOCK_INDEX_DESC
  PRESENT_ASC
  PRESENT_DESC
  CODE_ASC
  CODE_DESC
  SCOPE_ASC
  SCOPE_DESC
  TABLE_ASC
  TABLE_DESC
  LONG_DOUBLE_PKEY_ASC
  LONG_DOUBLE_PKEY_DESC
  PAYER_ASC
  PAYER_DESC
  SECONDARY_KEY_ASC
  SECONDARY_KEY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ContractRow implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  crowPkey: BigFloat!
  payer: String
  value: String
}

"""
A condition to be used against `ContractRow` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ContractRowCondition {
  """Checks for equality with the object’s `blockIndex` field."""
  blockIndex: BigInt

  """Checks for equality with the object’s `present` field."""
  present: Boolean

  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `scope` field."""
  scope: String

  """Checks for equality with the object’s `table` field."""
  table: String

  """Checks for equality with the object’s `crowPkey` field."""
  crowPkey: BigFloat

  """Checks for equality with the object’s `payer` field."""
  payer: String

  """Checks for equality with the object’s `value` field."""
  value: String
}

"""An input for mutations affecting `ContractRow`"""
input ContractRowInput {
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  crowPkey: BigFloat!
  payer: String
  value: String
}

"""
Represents an update to a `ContractRow`. Fields that are set will be updated.
"""
input ContractRowPatch {
  blockIndex: BigInt
  present: Boolean
  code: String
  scope: String
  table: String
  crowPkey: BigFloat
  payer: String
  value: String
}

"""A connection to a list of `ContractRow` values."""
type ContractRowsConnection {
  """A list of `ContractRow` objects."""
  nodes: [ContractRow]!

  """
  A list of edges which contains the `ContractRow` and cursor to aid in pagination.
  """
  edges: [ContractRowsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ContractRow` you could get from the connection."""
  totalCount: Int
}

"""A `ContractRow` edge in the connection."""
type ContractRowsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContractRow` at the end of the edge."""
  node: ContractRow
}

"""Methods to use when ordering `ContractRow`."""
enum ContractRowsOrderBy {
  NATURAL
  BLOCK_INDEX_ASC
  BLOCK_INDEX_DESC
  PRESENT_ASC
  PRESENT_DESC
  CODE_ASC
  CODE_DESC
  SCOPE_ASC
  SCOPE_DESC
  TABLE_ASC
  TABLE_DESC
  CROW_PKEY_ASC
  CROW_PKEY_DESC
  PAYER_ASC
  PAYER_DESC
  VALUE_ASC
  VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ContractTable implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  payer: String
}

"""
A condition to be used against `ContractTable` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ContractTableCondition {
  """Checks for equality with the object’s `blockIndex` field."""
  blockIndex: BigInt

  """Checks for equality with the object’s `present` field."""
  present: Boolean

  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `scope` field."""
  scope: String

  """Checks for equality with the object’s `table` field."""
  table: String

  """Checks for equality with the object’s `payer` field."""
  payer: String
}

"""An input for mutations affecting `ContractTable`"""
input ContractTableInput {
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  payer: String
}

"""
Represents an update to a `ContractTable`. Fields that are set will be updated.
"""
input ContractTablePatch {
  blockIndex: BigInt
  present: Boolean
  code: String
  scope: String
  table: String
  payer: String
}

"""A connection to a list of `ContractTable` values."""
type ContractTablesConnection {
  """A list of `ContractTable` objects."""
  nodes: [ContractTable]!

  """
  A list of edges which contains the `ContractTable` and cursor to aid in pagination.
  """
  edges: [ContractTablesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ContractTable` you could get from the connection."""
  totalCount: Int
}

"""A `ContractTable` edge in the connection."""
type ContractTablesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContractTable` at the end of the edge."""
  node: ContractTable
}

"""Methods to use when ordering `ContractTable`."""
enum ContractTablesOrderBy {
  NATURAL
  BLOCK_INDEX_ASC
  BLOCK_INDEX_DESC
  PRESENT_ASC
  PRESENT_DESC
  CODE_ASC
  CODE_DESC
  SCOPE_ASC
  SCOPE_DESC
  TABLE_ASC
  TABLE_DESC
  PAYER_ASC
  PAYER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `Account` mutation."""
input CreateAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Account` to be created by this mutation."""
  account: AccountInput!
}

"""The output of our create `Account` mutation."""
type CreateAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Account` that was created by this mutation."""
  account: Account

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Account`. May be used by Relay 1."""
  accountEdge(
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = PRIMARY_KEY_ASC
  ): AccountsEdge
}

"""All input for the create `ActionTraceAuthorization` mutation."""
input CreateActionTraceAuthorizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ActionTraceAuthorization` to be created by this mutation."""
  actionTraceAuthorization: ActionTraceAuthorizationInput!
}

"""The output of our create `ActionTraceAuthorization` mutation."""
type CreateActionTraceAuthorizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ActionTraceAuthorization` that was created by this mutation."""
  actionTraceAuthorization: ActionTraceAuthorization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ActionTraceAuthorization`. May be used by Relay 1."""
  actionTraceAuthorizationEdge(
    """The method to use when ordering `ActionTraceAuthorization`."""
    orderBy: [ActionTraceAuthorizationsOrderBy!] = PRIMARY_KEY_ASC
  ): ActionTraceAuthorizationsEdge
}

"""All input for the create `ActionTraceAuthSequence` mutation."""
input CreateActionTraceAuthSequenceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ActionTraceAuthSequence` to be created by this mutation."""
  actionTraceAuthSequence: ActionTraceAuthSequenceInput!
}

"""The output of our create `ActionTraceAuthSequence` mutation."""
type CreateActionTraceAuthSequencePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ActionTraceAuthSequence` that was created by this mutation."""
  actionTraceAuthSequence: ActionTraceAuthSequence

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ActionTraceAuthSequence`. May be used by Relay 1."""
  actionTraceAuthSequenceEdge(
    """The method to use when ordering `ActionTraceAuthSequence`."""
    orderBy: [ActionTraceAuthSequencesOrderBy!] = PRIMARY_KEY_ASC
  ): ActionTraceAuthSequencesEdge
}

"""All input for the create `ActionTrace` mutation."""
input CreateActionTraceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ActionTrace` to be created by this mutation."""
  actionTrace: ActionTraceInput!
}

"""The output of our create `ActionTrace` mutation."""
type CreateActionTracePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ActionTrace` that was created by this mutation."""
  actionTrace: ActionTrace

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ActionTrace`. May be used by Relay 1."""
  actionTraceEdge(
    """The method to use when ordering `ActionTrace`."""
    orderBy: [ActionTracesOrderBy!] = PRIMARY_KEY_ASC
  ): ActionTracesEdge
}

"""All input for the create `ActionTraceRamDelta` mutation."""
input CreateActionTraceRamDeltaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ActionTraceRamDelta` to be created by this mutation."""
  actionTraceRamDelta: ActionTraceRamDeltaInput!
}

"""The output of our create `ActionTraceRamDelta` mutation."""
type CreateActionTraceRamDeltaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ActionTraceRamDelta` that was created by this mutation."""
  actionTraceRamDelta: ActionTraceRamDelta

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ActionTraceRamDelta`. May be used by Relay 1."""
  actionTraceRamDeltaEdge(
    """The method to use when ordering `ActionTraceRamDelta`."""
    orderBy: [ActionTraceRamDeltasOrderBy!] = PRIMARY_KEY_ASC
  ): ActionTraceRamDeltasEdge
}

"""All input for the create `BlockInfo` mutation."""
input CreateBlockInfoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `BlockInfo` to be created by this mutation."""
  blockInfo: BlockInfoInput!
}

"""The output of our create `BlockInfo` mutation."""
type CreateBlockInfoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BlockInfo` that was created by this mutation."""
  blockInfo: BlockInfo

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `BlockInfo`. May be used by Relay 1."""
  blockInfoEdge(
    """The method to use when ordering `BlockInfo`."""
    orderBy: [BlockInfosOrderBy!] = PRIMARY_KEY_ASC
  ): BlockInfosEdge
}

"""All input for the create `ContractIndex128` mutation."""
input CreateContractIndex128Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ContractIndex128` to be created by this mutation."""
  contractIndex128: ContractIndex128Input!
}

"""The output of our create `ContractIndex128` mutation."""
type CreateContractIndex128Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContractIndex128` that was created by this mutation."""
  contractIndex128: ContractIndex128

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContractIndex128`. May be used by Relay 1."""
  contractIndex128Edge(
    """The method to use when ordering `ContractIndex128`."""
    orderBy: [ContractIndex128SOrderBy!] = PRIMARY_KEY_ASC
  ): ContractIndex128SEdge
}

"""All input for the create `ContractIndex256` mutation."""
input CreateContractIndex256Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ContractIndex256` to be created by this mutation."""
  contractIndex256: ContractIndex256Input!
}

"""The output of our create `ContractIndex256` mutation."""
type CreateContractIndex256Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContractIndex256` that was created by this mutation."""
  contractIndex256: ContractIndex256

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContractIndex256`. May be used by Relay 1."""
  contractIndex256Edge(
    """The method to use when ordering `ContractIndex256`."""
    orderBy: [ContractIndex256SOrderBy!] = PRIMARY_KEY_ASC
  ): ContractIndex256SEdge
}

"""All input for the create `ContractIndex64` mutation."""
input CreateContractIndex64Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ContractIndex64` to be created by this mutation."""
  contractIndex64: ContractIndex64Input!
}

"""The output of our create `ContractIndex64` mutation."""
type CreateContractIndex64Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContractIndex64` that was created by this mutation."""
  contractIndex64: ContractIndex64

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContractIndex64`. May be used by Relay 1."""
  contractIndex64Edge(
    """The method to use when ordering `ContractIndex64`."""
    orderBy: [ContractIndex64SOrderBy!] = PRIMARY_KEY_ASC
  ): ContractIndex64SEdge
}

"""All input for the create `ContractIndexDouble` mutation."""
input CreateContractIndexDoubleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ContractIndexDouble` to be created by this mutation."""
  contractIndexDouble: ContractIndexDoubleInput!
}

"""The output of our create `ContractIndexDouble` mutation."""
type CreateContractIndexDoublePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContractIndexDouble` that was created by this mutation."""
  contractIndexDouble: ContractIndexDouble

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContractIndexDouble`. May be used by Relay 1."""
  contractIndexDoubleEdge(
    """The method to use when ordering `ContractIndexDouble`."""
    orderBy: [ContractIndexDoublesOrderBy!] = PRIMARY_KEY_ASC
  ): ContractIndexDoublesEdge
}

"""All input for the create `ContractIndexLongDouble` mutation."""
input CreateContractIndexLongDoubleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ContractIndexLongDouble` to be created by this mutation."""
  contractIndexLongDouble: ContractIndexLongDoubleInput!
}

"""The output of our create `ContractIndexLongDouble` mutation."""
type CreateContractIndexLongDoublePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContractIndexLongDouble` that was created by this mutation."""
  contractIndexLongDouble: ContractIndexLongDouble

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContractIndexLongDouble`. May be used by Relay 1."""
  contractIndexLongDoubleEdge(
    """The method to use when ordering `ContractIndexLongDouble`."""
    orderBy: [ContractIndexLongDoublesOrderBy!] = PRIMARY_KEY_ASC
  ): ContractIndexLongDoublesEdge
}

"""All input for the create `ContractRow` mutation."""
input CreateContractRowInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ContractRow` to be created by this mutation."""
  contractRow: ContractRowInput!
}

"""The output of our create `ContractRow` mutation."""
type CreateContractRowPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContractRow` that was created by this mutation."""
  contractRow: ContractRow

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContractRow`. May be used by Relay 1."""
  contractRowEdge(
    """The method to use when ordering `ContractRow`."""
    orderBy: [ContractRowsOrderBy!] = PRIMARY_KEY_ASC
  ): ContractRowsEdge
}

"""All input for the create `ContractTable` mutation."""
input CreateContractTableInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ContractTable` to be created by this mutation."""
  contractTable: ContractTableInput!
}

"""The output of our create `ContractTable` mutation."""
type CreateContractTablePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContractTable` that was created by this mutation."""
  contractTable: ContractTable

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContractTable`. May be used by Relay 1."""
  contractTableEdge(
    """The method to use when ordering `ContractTable`."""
    orderBy: [ContractTablesOrderBy!] = PRIMARY_KEY_ASC
  ): ContractTablesEdge
}

"""All input for the create `FillStatus` mutation."""
input CreateFillStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FillStatus` to be created by this mutation."""
  fillStatus: FillStatusInput!
}

"""The output of our create `FillStatus` mutation."""
type CreateFillStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FillStatus` that was created by this mutation."""
  fillStatus: FillStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FillStatus`. May be used by Relay 1."""
  fillStatusEdge(
    """The method to use when ordering `FillStatus`."""
    orderBy: [FillStatusesOrderBy!] = NATURAL
  ): FillStatusesEdge
}

"""All input for the create `GeneratedTransaction` mutation."""
input CreateGeneratedTransactionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GeneratedTransaction` to be created by this mutation."""
  generatedTransaction: GeneratedTransactionInput!
}

"""The output of our create `GeneratedTransaction` mutation."""
type CreateGeneratedTransactionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GeneratedTransaction` that was created by this mutation."""
  generatedTransaction: GeneratedTransaction

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `GeneratedTransaction`. May be used by Relay 1."""
  generatedTransactionEdge(
    """The method to use when ordering `GeneratedTransaction`."""
    orderBy: [GeneratedTransactionsOrderBy!] = PRIMARY_KEY_ASC
  ): GeneratedTransactionsEdge
}

"""All input for the create `GlobalProperty` mutation."""
input CreateGlobalPropertyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GlobalProperty` to be created by this mutation."""
  globalProperty: GlobalPropertyInput!
}

"""The output of our create `GlobalProperty` mutation."""
type CreateGlobalPropertyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GlobalProperty` that was created by this mutation."""
  globalProperty: GlobalProperty

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `GlobalProperty`. May be used by Relay 1."""
  globalPropertyEdge(
    """The method to use when ordering `GlobalProperty`."""
    orderBy: [GlobalPropertiesOrderBy!] = PRIMARY_KEY_ASC
  ): GlobalPropertiesEdge
}

"""All input for the create `Permission` mutation."""
input CreatePermissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Permission` to be created by this mutation."""
  permission: PermissionInput!
}

"""All input for the create `PermissionLink` mutation."""
input CreatePermissionLinkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PermissionLink` to be created by this mutation."""
  permissionLink: PermissionLinkInput!
}

"""The output of our create `PermissionLink` mutation."""
type CreatePermissionLinkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PermissionLink` that was created by this mutation."""
  permissionLink: PermissionLink

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `PermissionLink`. May be used by Relay 1."""
  permissionLinkEdge(
    """The method to use when ordering `PermissionLink`."""
    orderBy: [PermissionLinksOrderBy!] = PRIMARY_KEY_ASC
  ): PermissionLinksEdge
}

"""The output of our create `Permission` mutation."""
type CreatePermissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Permission` that was created by this mutation."""
  permission: Permission

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Permission`. May be used by Relay 1."""
  permissionEdge(
    """The method to use when ordering `Permission`."""
    orderBy: [PermissionsOrderBy!] = PRIMARY_KEY_ASC
  ): PermissionsEdge
}

"""All input for the create `ReceivedBlock` mutation."""
input CreateReceivedBlockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ReceivedBlock` to be created by this mutation."""
  receivedBlock: ReceivedBlockInput!
}

"""The output of our create `ReceivedBlock` mutation."""
type CreateReceivedBlockPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReceivedBlock` that was created by this mutation."""
  receivedBlock: ReceivedBlock

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ReceivedBlock`. May be used by Relay 1."""
  receivedBlockEdge(
    """The method to use when ordering `ReceivedBlock`."""
    orderBy: [ReceivedBlocksOrderBy!] = PRIMARY_KEY_ASC
  ): ReceivedBlocksEdge
}

"""All input for the create `ResourceLimit` mutation."""
input CreateResourceLimitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ResourceLimit` to be created by this mutation."""
  resourceLimit: ResourceLimitInput!
}

"""The output of our create `ResourceLimit` mutation."""
type CreateResourceLimitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ResourceLimit` that was created by this mutation."""
  resourceLimit: ResourceLimit

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ResourceLimit`. May be used by Relay 1."""
  resourceLimitEdge(
    """The method to use when ordering `ResourceLimit`."""
    orderBy: [ResourceLimitsOrderBy!] = PRIMARY_KEY_ASC
  ): ResourceLimitsEdge
}

"""All input for the create `ResourceLimitsConfig` mutation."""
input CreateResourceLimitsConfigInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ResourceLimitsConfig` to be created by this mutation."""
  resourceLimitsConfig: ResourceLimitsConfigInput!
}

"""The output of our create `ResourceLimitsConfig` mutation."""
type CreateResourceLimitsConfigPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ResourceLimitsConfig` that was created by this mutation."""
  resourceLimitsConfig: ResourceLimitsConfig

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ResourceLimitsConfig`. May be used by Relay 1."""
  resourceLimitsConfigEdge(
    """The method to use when ordering `ResourceLimitsConfig`."""
    orderBy: [ResourceLimitsConfigsOrderBy!] = PRIMARY_KEY_ASC
  ): ResourceLimitsConfigsEdge
}

"""All input for the create `ResourceLimitsState` mutation."""
input CreateResourceLimitsStateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ResourceLimitsState` to be created by this mutation."""
  resourceLimitsState: ResourceLimitsStateInput!
}

"""The output of our create `ResourceLimitsState` mutation."""
type CreateResourceLimitsStatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ResourceLimitsState` that was created by this mutation."""
  resourceLimitsState: ResourceLimitsState

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ResourceLimitsState`. May be used by Relay 1."""
  resourceLimitsStateEdge(
    """The method to use when ordering `ResourceLimitsState`."""
    orderBy: [ResourceLimitsStatesOrderBy!] = PRIMARY_KEY_ASC
  ): ResourceLimitsStatesEdge
}

"""All input for the create `ResourceUsage` mutation."""
input CreateResourceUsageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ResourceUsage` to be created by this mutation."""
  resourceUsage: ResourceUsageInput!
}

"""The output of our create `ResourceUsage` mutation."""
type CreateResourceUsagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ResourceUsage` that was created by this mutation."""
  resourceUsage: ResourceUsage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ResourceUsage`. May be used by Relay 1."""
  resourceUsageEdge(
    """The method to use when ordering `ResourceUsage`."""
    orderBy: [ResourceUsagesOrderBy!] = PRIMARY_KEY_ASC
  ): ResourceUsagesEdge
}

"""All input for the create `TransactionTrace` mutation."""
input CreateTransactionTraceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TransactionTrace` to be created by this mutation."""
  transactionTrace: TransactionTraceInput!
}

"""The output of our create `TransactionTrace` mutation."""
type CreateTransactionTracePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TransactionTrace` that was created by this mutation."""
  transactionTrace: TransactionTrace

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TransactionTrace`. May be used by Relay 1."""
  transactionTraceEdge(
    """The method to use when ordering `TransactionTrace`."""
    orderBy: [TransactionTracesOrderBy!] = PRIMARY_KEY_ASC
  ): TransactionTracesEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
All input for the `deleteAccountByBlockIndexAndPresentAndName` mutation.
"""
input DeleteAccountByBlockIndexAndPresentAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  blockIndex: BigInt!
  present: Boolean!
  name: String!
}

"""All input for the `deleteAccount` mutation."""
input DeleteAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Account` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Account` mutation."""
type DeleteAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Account` that was deleted by this mutation."""
  account: Account
  deletedAccountId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Account`. May be used by Relay 1."""
  accountEdge(
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = PRIMARY_KEY_ASC
  ): AccountsEdge
}

"""
All input for the `deleteActionTraceAuthorizationByBlockIndexAndTransactionIdAndActionIndexAndIndex` mutation.
"""
input DeleteActionTraceAuthorizationByBlockIndexAndTransactionIdAndActionIndexAndIndexInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  blockIndex: BigInt!
  transactionId: String!
  actionIndex: Int!
  index: Int!
}

"""All input for the `deleteActionTraceAuthorization` mutation."""
input DeleteActionTraceAuthorizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ActionTraceAuthorization` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ActionTraceAuthorization` mutation."""
type DeleteActionTraceAuthorizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ActionTraceAuthorization` that was deleted by this mutation."""
  actionTraceAuthorization: ActionTraceAuthorization
  deletedActionTraceAuthorizationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ActionTraceAuthorization`. May be used by Relay 1."""
  actionTraceAuthorizationEdge(
    """The method to use when ordering `ActionTraceAuthorization`."""
    orderBy: [ActionTraceAuthorizationsOrderBy!] = PRIMARY_KEY_ASC
  ): ActionTraceAuthorizationsEdge
}

"""
All input for the `deleteActionTraceAuthSequenceByBlockIndexAndTransactionIdAndActionIndexAndIndex` mutation.
"""
input DeleteActionTraceAuthSequenceByBlockIndexAndTransactionIdAndActionIndexAndIndexInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  blockIndex: BigInt!
  transactionId: String!
  actionIndex: Int!
  index: Int!
}

"""All input for the `deleteActionTraceAuthSequence` mutation."""
input DeleteActionTraceAuthSequenceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ActionTraceAuthSequence` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ActionTraceAuthSequence` mutation."""
type DeleteActionTraceAuthSequencePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ActionTraceAuthSequence` that was deleted by this mutation."""
  actionTraceAuthSequence: ActionTraceAuthSequence
  deletedActionTraceAuthSequenceId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ActionTraceAuthSequence`. May be used by Relay 1."""
  actionTraceAuthSequenceEdge(
    """The method to use when ordering `ActionTraceAuthSequence`."""
    orderBy: [ActionTraceAuthSequencesOrderBy!] = PRIMARY_KEY_ASC
  ): ActionTraceAuthSequencesEdge
}

"""
All input for the `deleteActionTraceByBlockIndexAndTransactionIdAndActionIndex` mutation.
"""
input DeleteActionTraceByBlockIndexAndTransactionIdAndActionIndexInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  blockIndex: BigInt!
  transactionId: String!
  actionIndex: Int!
}

"""All input for the `deleteActionTrace` mutation."""
input DeleteActionTraceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ActionTrace` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ActionTrace` mutation."""
type DeleteActionTracePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ActionTrace` that was deleted by this mutation."""
  actionTrace: ActionTrace
  deletedActionTraceId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ActionTrace`. May be used by Relay 1."""
  actionTraceEdge(
    """The method to use when ordering `ActionTrace`."""
    orderBy: [ActionTracesOrderBy!] = PRIMARY_KEY_ASC
  ): ActionTracesEdge
}

"""
All input for the `deleteActionTraceRamDeltaByBlockIndexAndTransactionIdAndActionIndexAndIndex` mutation.
"""
input DeleteActionTraceRamDeltaByBlockIndexAndTransactionIdAndActionIndexAndIndexInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  blockIndex: BigInt!
  transactionId: String!
  actionIndex: Int!
  index: Int!
}

"""All input for the `deleteActionTraceRamDelta` mutation."""
input DeleteActionTraceRamDeltaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ActionTraceRamDelta` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ActionTraceRamDelta` mutation."""
type DeleteActionTraceRamDeltaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ActionTraceRamDelta` that was deleted by this mutation."""
  actionTraceRamDelta: ActionTraceRamDelta
  deletedActionTraceRamDeltaId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ActionTraceRamDelta`. May be used by Relay 1."""
  actionTraceRamDeltaEdge(
    """The method to use when ordering `ActionTraceRamDelta`."""
    orderBy: [ActionTraceRamDeltasOrderBy!] = PRIMARY_KEY_ASC
  ): ActionTraceRamDeltasEdge
}

"""All input for the `deleteBlockInfoByBlockIndex` mutation."""
input DeleteBlockInfoByBlockIndexInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  blockIndex: BigInt!
}

"""All input for the `deleteBlockInfo` mutation."""
input DeleteBlockInfoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BlockInfo` to be deleted.
  """
  id: ID!
}

"""The output of our delete `BlockInfo` mutation."""
type DeleteBlockInfoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BlockInfo` that was deleted by this mutation."""
  blockInfo: BlockInfo
  deletedBlockInfoId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `BlockInfo`. May be used by Relay 1."""
  blockInfoEdge(
    """The method to use when ordering `BlockInfo`."""
    orderBy: [BlockInfosOrderBy!] = PRIMARY_KEY_ASC
  ): BlockInfosEdge
}

"""
All input for the `deleteContractIndex128ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI128Pkey` mutation.
"""
input DeleteContractIndex128ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI128PkeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  i128Pkey: BigFloat!
}

"""All input for the `deleteContractIndex128` mutation."""
input DeleteContractIndex128Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ContractIndex128` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ContractIndex128` mutation."""
type DeleteContractIndex128Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContractIndex128` that was deleted by this mutation."""
  contractIndex128: ContractIndex128
  deletedContractIndex128Id: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContractIndex128`. May be used by Relay 1."""
  contractIndex128Edge(
    """The method to use when ordering `ContractIndex128`."""
    orderBy: [ContractIndex128SOrderBy!] = PRIMARY_KEY_ASC
  ): ContractIndex128SEdge
}

"""
All input for the `deleteContractIndex256ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI256Pkey` mutation.
"""
input DeleteContractIndex256ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI256PkeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  i256Pkey: BigFloat!
}

"""All input for the `deleteContractIndex256` mutation."""
input DeleteContractIndex256Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ContractIndex256` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ContractIndex256` mutation."""
type DeleteContractIndex256Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContractIndex256` that was deleted by this mutation."""
  contractIndex256: ContractIndex256
  deletedContractIndex256Id: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContractIndex256`. May be used by Relay 1."""
  contractIndex256Edge(
    """The method to use when ordering `ContractIndex256`."""
    orderBy: [ContractIndex256SOrderBy!] = PRIMARY_KEY_ASC
  ): ContractIndex256SEdge
}

"""
All input for the `deleteContractIndex64ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI64Pkey` mutation.
"""
input DeleteContractIndex64ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI64PkeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  i64Pkey: BigFloat!
}

"""All input for the `deleteContractIndex64` mutation."""
input DeleteContractIndex64Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ContractIndex64` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ContractIndex64` mutation."""
type DeleteContractIndex64Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContractIndex64` that was deleted by this mutation."""
  contractIndex64: ContractIndex64
  deletedContractIndex64Id: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContractIndex64`. May be used by Relay 1."""
  contractIndex64Edge(
    """The method to use when ordering `ContractIndex64`."""
    orderBy: [ContractIndex64SOrderBy!] = PRIMARY_KEY_ASC
  ): ContractIndex64SEdge
}

"""
All input for the `deleteContractIndexDoubleByBlockIndexAndPresentAndCodeAndScopeAndTableAndDoublePkey` mutation.
"""
input DeleteContractIndexDoubleByBlockIndexAndPresentAndCodeAndScopeAndTableAndDoublePkeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  doublePkey: BigFloat!
}

"""All input for the `deleteContractIndexDouble` mutation."""
input DeleteContractIndexDoubleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ContractIndexDouble` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ContractIndexDouble` mutation."""
type DeleteContractIndexDoublePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContractIndexDouble` that was deleted by this mutation."""
  contractIndexDouble: ContractIndexDouble
  deletedContractIndexDoubleId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContractIndexDouble`. May be used by Relay 1."""
  contractIndexDoubleEdge(
    """The method to use when ordering `ContractIndexDouble`."""
    orderBy: [ContractIndexDoublesOrderBy!] = PRIMARY_KEY_ASC
  ): ContractIndexDoublesEdge
}

"""
All input for the `deleteContractIndexLongDoubleByBlockIndexAndPresentAndCodeAndScopeAndTableAndLongDoublePkey` mutation.
"""
input DeleteContractIndexLongDoubleByBlockIndexAndPresentAndCodeAndScopeAndTableAndLongDoublePkeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  longDoublePkey: BigFloat!
}

"""All input for the `deleteContractIndexLongDouble` mutation."""
input DeleteContractIndexLongDoubleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ContractIndexLongDouble` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ContractIndexLongDouble` mutation."""
type DeleteContractIndexLongDoublePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContractIndexLongDouble` that was deleted by this mutation."""
  contractIndexLongDouble: ContractIndexLongDouble
  deletedContractIndexLongDoubleId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContractIndexLongDouble`. May be used by Relay 1."""
  contractIndexLongDoubleEdge(
    """The method to use when ordering `ContractIndexLongDouble`."""
    orderBy: [ContractIndexLongDoublesOrderBy!] = PRIMARY_KEY_ASC
  ): ContractIndexLongDoublesEdge
}

"""
All input for the `deleteContractRowByBlockIndexAndPresentAndCodeAndScopeAndTableAndCrowPkey` mutation.
"""
input DeleteContractRowByBlockIndexAndPresentAndCodeAndScopeAndTableAndCrowPkeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  crowPkey: BigFloat!
}

"""All input for the `deleteContractRow` mutation."""
input DeleteContractRowInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ContractRow` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ContractRow` mutation."""
type DeleteContractRowPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContractRow` that was deleted by this mutation."""
  contractRow: ContractRow
  deletedContractRowId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContractRow`. May be used by Relay 1."""
  contractRowEdge(
    """The method to use when ordering `ContractRow`."""
    orderBy: [ContractRowsOrderBy!] = PRIMARY_KEY_ASC
  ): ContractRowsEdge
}

"""
All input for the `deleteContractTableByBlockIndexAndPresentAndCodeAndScopeAndTable` mutation.
"""
input DeleteContractTableByBlockIndexAndPresentAndCodeAndScopeAndTableInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
}

"""All input for the `deleteContractTable` mutation."""
input DeleteContractTableInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ContractTable` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ContractTable` mutation."""
type DeleteContractTablePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContractTable` that was deleted by this mutation."""
  contractTable: ContractTable
  deletedContractTableId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContractTable`. May be used by Relay 1."""
  contractTableEdge(
    """The method to use when ordering `ContractTable`."""
    orderBy: [ContractTablesOrderBy!] = PRIMARY_KEY_ASC
  ): ContractTablesEdge
}

"""
All input for the `deleteGeneratedTransactionByBlockIndexAndPresentAndSenderAndSenderId` mutation.
"""
input DeleteGeneratedTransactionByBlockIndexAndPresentAndSenderAndSenderIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  blockIndex: BigInt!
  present: Boolean!
  sender: String!
  senderId: BigFloat!
}

"""All input for the `deleteGeneratedTransaction` mutation."""
input DeleteGeneratedTransactionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GeneratedTransaction` to be deleted.
  """
  id: ID!
}

"""The output of our delete `GeneratedTransaction` mutation."""
type DeleteGeneratedTransactionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GeneratedTransaction` that was deleted by this mutation."""
  generatedTransaction: GeneratedTransaction
  deletedGeneratedTransactionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `GeneratedTransaction`. May be used by Relay 1."""
  generatedTransactionEdge(
    """The method to use when ordering `GeneratedTransaction`."""
    orderBy: [GeneratedTransactionsOrderBy!] = PRIMARY_KEY_ASC
  ): GeneratedTransactionsEdge
}

"""
All input for the `deleteGlobalPropertyByBlockIndexAndPresent` mutation.
"""
input DeleteGlobalPropertyByBlockIndexAndPresentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  blockIndex: BigInt!
  present: Boolean!
}

"""All input for the `deleteGlobalProperty` mutation."""
input DeleteGlobalPropertyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GlobalProperty` to be deleted.
  """
  id: ID!
}

"""The output of our delete `GlobalProperty` mutation."""
type DeleteGlobalPropertyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GlobalProperty` that was deleted by this mutation."""
  globalProperty: GlobalProperty
  deletedGlobalPropertyId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `GlobalProperty`. May be used by Relay 1."""
  globalPropertyEdge(
    """The method to use when ordering `GlobalProperty`."""
    orderBy: [GlobalPropertiesOrderBy!] = PRIMARY_KEY_ASC
  ): GlobalPropertiesEdge
}

"""
All input for the `deletePermissionByBlockIndexAndPresentAndOwnerAndName` mutation.
"""
input DeletePermissionByBlockIndexAndPresentAndOwnerAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  blockIndex: BigInt!
  present: Boolean!
  owner: String!
  name: String!
}

"""All input for the `deletePermission` mutation."""
input DeletePermissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Permission` to be deleted.
  """
  id: ID!
}

"""
All input for the `deletePermissionLinkByBlockIndexAndPresentAndAccountAndCodeAndMessageType` mutation.
"""
input DeletePermissionLinkByBlockIndexAndPresentAndAccountAndCodeAndMessageTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  blockIndex: BigInt!
  present: Boolean!
  account: String!
  code: String!
  messageType: String!
}

"""All input for the `deletePermissionLink` mutation."""
input DeletePermissionLinkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PermissionLink` to be deleted.
  """
  id: ID!
}

"""The output of our delete `PermissionLink` mutation."""
type DeletePermissionLinkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PermissionLink` that was deleted by this mutation."""
  permissionLink: PermissionLink
  deletedPermissionLinkId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `PermissionLink`. May be used by Relay 1."""
  permissionLinkEdge(
    """The method to use when ordering `PermissionLink`."""
    orderBy: [PermissionLinksOrderBy!] = PRIMARY_KEY_ASC
  ): PermissionLinksEdge
}

"""The output of our delete `Permission` mutation."""
type DeletePermissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Permission` that was deleted by this mutation."""
  permission: Permission
  deletedPermissionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Permission`. May be used by Relay 1."""
  permissionEdge(
    """The method to use when ordering `Permission`."""
    orderBy: [PermissionsOrderBy!] = PRIMARY_KEY_ASC
  ): PermissionsEdge
}

"""All input for the `deleteReceivedBlockByBlockIndex` mutation."""
input DeleteReceivedBlockByBlockIndexInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  blockIndex: BigInt!
}

"""All input for the `deleteReceivedBlock` mutation."""
input DeleteReceivedBlockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReceivedBlock` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ReceivedBlock` mutation."""
type DeleteReceivedBlockPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReceivedBlock` that was deleted by this mutation."""
  receivedBlock: ReceivedBlock
  deletedReceivedBlockId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ReceivedBlock`. May be used by Relay 1."""
  receivedBlockEdge(
    """The method to use when ordering `ReceivedBlock`."""
    orderBy: [ReceivedBlocksOrderBy!] = PRIMARY_KEY_ASC
  ): ReceivedBlocksEdge
}

"""
All input for the `deleteResourceLimitByBlockIndexAndPresentAndOwner` mutation.
"""
input DeleteResourceLimitByBlockIndexAndPresentAndOwnerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  blockIndex: BigInt!
  present: Boolean!
  owner: String!
}

"""All input for the `deleteResourceLimit` mutation."""
input DeleteResourceLimitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ResourceLimit` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ResourceLimit` mutation."""
type DeleteResourceLimitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ResourceLimit` that was deleted by this mutation."""
  resourceLimit: ResourceLimit
  deletedResourceLimitId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ResourceLimit`. May be used by Relay 1."""
  resourceLimitEdge(
    """The method to use when ordering `ResourceLimit`."""
    orderBy: [ResourceLimitsOrderBy!] = PRIMARY_KEY_ASC
  ): ResourceLimitsEdge
}

"""
All input for the `deleteResourceLimitsConfigByBlockIndexAndPresent` mutation.
"""
input DeleteResourceLimitsConfigByBlockIndexAndPresentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  blockIndex: BigInt!
  present: Boolean!
}

"""All input for the `deleteResourceLimitsConfig` mutation."""
input DeleteResourceLimitsConfigInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ResourceLimitsConfig` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ResourceLimitsConfig` mutation."""
type DeleteResourceLimitsConfigPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ResourceLimitsConfig` that was deleted by this mutation."""
  resourceLimitsConfig: ResourceLimitsConfig
  deletedResourceLimitsConfigId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ResourceLimitsConfig`. May be used by Relay 1."""
  resourceLimitsConfigEdge(
    """The method to use when ordering `ResourceLimitsConfig`."""
    orderBy: [ResourceLimitsConfigsOrderBy!] = PRIMARY_KEY_ASC
  ): ResourceLimitsConfigsEdge
}

"""
All input for the `deleteResourceLimitsStateByBlockIndexAndPresent` mutation.
"""
input DeleteResourceLimitsStateByBlockIndexAndPresentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  blockIndex: BigInt!
  present: Boolean!
}

"""All input for the `deleteResourceLimitsState` mutation."""
input DeleteResourceLimitsStateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ResourceLimitsState` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ResourceLimitsState` mutation."""
type DeleteResourceLimitsStatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ResourceLimitsState` that was deleted by this mutation."""
  resourceLimitsState: ResourceLimitsState
  deletedResourceLimitsStateId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ResourceLimitsState`. May be used by Relay 1."""
  resourceLimitsStateEdge(
    """The method to use when ordering `ResourceLimitsState`."""
    orderBy: [ResourceLimitsStatesOrderBy!] = PRIMARY_KEY_ASC
  ): ResourceLimitsStatesEdge
}

"""
All input for the `deleteResourceUsageByBlockIndexAndPresentAndOwner` mutation.
"""
input DeleteResourceUsageByBlockIndexAndPresentAndOwnerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  blockIndex: BigInt!
  present: Boolean!
  owner: String!
}

"""All input for the `deleteResourceUsage` mutation."""
input DeleteResourceUsageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ResourceUsage` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ResourceUsage` mutation."""
type DeleteResourceUsagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ResourceUsage` that was deleted by this mutation."""
  resourceUsage: ResourceUsage
  deletedResourceUsageId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ResourceUsage`. May be used by Relay 1."""
  resourceUsageEdge(
    """The method to use when ordering `ResourceUsage`."""
    orderBy: [ResourceUsagesOrderBy!] = PRIMARY_KEY_ASC
  ): ResourceUsagesEdge
}

"""
All input for the `deleteTransactionTraceByBlockIndexAndTransactionId` mutation.
"""
input DeleteTransactionTraceByBlockIndexAndTransactionIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  blockIndex: BigInt!
  transactionId: String!
}

"""All input for the `deleteTransactionTrace` mutation."""
input DeleteTransactionTraceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TransactionTrace` to be deleted.
  """
  id: ID!
}

"""The output of our delete `TransactionTrace` mutation."""
type DeleteTransactionTracePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TransactionTrace` that was deleted by this mutation."""
  transactionTrace: TransactionTrace
  deletedTransactionTraceId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TransactionTrace`. May be used by Relay 1."""
  transactionTraceEdge(
    """The method to use when ordering `TransactionTrace`."""
    orderBy: [TransactionTracesOrderBy!] = PRIMARY_KEY_ASC
  ): TransactionTracesEdge
}

type FillStatus {
  head: BigInt
  headId: String
  irreversible: BigInt
  irreversibleId: String
}

"""
A condition to be used against `FillStatus` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FillStatusCondition {
  """Checks for equality with the object’s `head` field."""
  head: BigInt

  """Checks for equality with the object’s `headId` field."""
  headId: String

  """Checks for equality with the object’s `irreversible` field."""
  irreversible: BigInt

  """Checks for equality with the object’s `irreversibleId` field."""
  irreversibleId: String
}

"""A connection to a list of `FillStatus` values."""
type FillStatusesConnection {
  """A list of `FillStatus` objects."""
  nodes: [FillStatus]!

  """
  A list of edges which contains the `FillStatus` and cursor to aid in pagination.
  """
  edges: [FillStatusesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FillStatus` you could get from the connection."""
  totalCount: Int
}

"""A `FillStatus` edge in the connection."""
type FillStatusesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FillStatus` at the end of the edge."""
  node: FillStatus
}

"""Methods to use when ordering `FillStatus`."""
enum FillStatusesOrderBy {
  NATURAL
  HEAD_ASC
  HEAD_DESC
  HEAD_ID_ASC
  HEAD_ID_DESC
  IRREVERSIBLE_ASC
  IRREVERSIBLE_DESC
  IRREVERSIBLE_ID_ASC
  IRREVERSIBLE_ID_DESC
}

"""An input for mutations affecting `FillStatus`"""
input FillStatusInput {
  head: BigInt
  headId: String
  irreversible: BigInt
  irreversibleId: String
}

type GeneratedTransaction implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockIndex: BigInt!
  present: Boolean!
  sender: String!
  senderId: BigFloat!
  payer: String
  trxId: String
  packedTrx: String
}

"""
A condition to be used against `GeneratedTransaction` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input GeneratedTransactionCondition {
  """Checks for equality with the object’s `blockIndex` field."""
  blockIndex: BigInt

  """Checks for equality with the object’s `present` field."""
  present: Boolean

  """Checks for equality with the object’s `sender` field."""
  sender: String

  """Checks for equality with the object’s `senderId` field."""
  senderId: BigFloat

  """Checks for equality with the object’s `payer` field."""
  payer: String

  """Checks for equality with the object’s `trxId` field."""
  trxId: String

  """Checks for equality with the object’s `packedTrx` field."""
  packedTrx: String
}

"""An input for mutations affecting `GeneratedTransaction`"""
input GeneratedTransactionInput {
  blockIndex: BigInt!
  present: Boolean!
  sender: String!
  senderId: BigFloat!
  payer: String
  trxId: String
  packedTrx: String
}

"""
Represents an update to a `GeneratedTransaction`. Fields that are set will be updated.
"""
input GeneratedTransactionPatch {
  blockIndex: BigInt
  present: Boolean
  sender: String
  senderId: BigFloat
  payer: String
  trxId: String
  packedTrx: String
}

"""A connection to a list of `GeneratedTransaction` values."""
type GeneratedTransactionsConnection {
  """A list of `GeneratedTransaction` objects."""
  nodes: [GeneratedTransaction]!

  """
  A list of edges which contains the `GeneratedTransaction` and cursor to aid in pagination.
  """
  edges: [GeneratedTransactionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `GeneratedTransaction` you could get from the connection.
  """
  totalCount: Int
}

"""A `GeneratedTransaction` edge in the connection."""
type GeneratedTransactionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GeneratedTransaction` at the end of the edge."""
  node: GeneratedTransaction
}

"""Methods to use when ordering `GeneratedTransaction`."""
enum GeneratedTransactionsOrderBy {
  NATURAL
  BLOCK_INDEX_ASC
  BLOCK_INDEX_DESC
  PRESENT_ASC
  PRESENT_DESC
  SENDER_ASC
  SENDER_DESC
  SENDER_ID_ASC
  SENDER_ID_DESC
  PAYER_ASC
  PAYER_DESC
  TRX_ID_ASC
  TRX_ID_DESC
  PACKED_TRX_ASC
  PACKED_TRX_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `GlobalProperty` values."""
type GlobalPropertiesConnection {
  """A list of `GlobalProperty` objects."""
  nodes: [GlobalProperty]!

  """
  A list of edges which contains the `GlobalProperty` and cursor to aid in pagination.
  """
  edges: [GlobalPropertiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `GlobalProperty` you could get from the connection.
  """
  totalCount: Int
}

"""A `GlobalProperty` edge in the connection."""
type GlobalPropertiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GlobalProperty` at the end of the edge."""
  node: GlobalProperty
}

"""Methods to use when ordering `GlobalProperty`."""
enum GlobalPropertiesOrderBy {
  NATURAL
  BLOCK_INDEX_ASC
  BLOCK_INDEX_DESC
  PRESENT_ASC
  PRESENT_DESC
  PROPOSED_SCHEDULE_BLOCK_NUM_ASC
  PROPOSED_SCHEDULE_BLOCK_NUM_DESC
  PROPOSED_SCHEDULE_VERSION_ASC
  PROPOSED_SCHEDULE_VERSION_DESC
  PROPOSED_SCHEDULE_PRODUCERS_ASC
  PROPOSED_SCHEDULE_PRODUCERS_DESC
  CONFIGURATION_MAX_BLOCK_NET_USAGE_ASC
  CONFIGURATION_MAX_BLOCK_NET_USAGE_DESC
  CONFIGURATION_TARGET_BLOCK_NET_USAGE_PCT_ASC
  CONFIGURATION_TARGET_BLOCK_NET_USAGE_PCT_DESC
  CONFIGURATION_MAX_TRANSACTION_NET_USAGE_ASC
  CONFIGURATION_MAX_TRANSACTION_NET_USAGE_DESC
  CONFIGURATION_BASE_PER_TRANSACTION_NET_USAGE_ASC
  CONFIGURATION_BASE_PER_TRANSACTION_NET_USAGE_DESC
  CONFIGURATION_NET_USAGE_LEEWAY_ASC
  CONFIGURATION_NET_USAGE_LEEWAY_DESC
  CONFIGURATION_CONTEXT_FREE_DISCOUNT_NET_USAGE_NUM_ASC
  CONFIGURATION_CONTEXT_FREE_DISCOUNT_NET_USAGE_NUM_DESC
  CONFIGURATION_CONTEXT_FREE_DISCOUNT_NET_USAGE_DEN_ASC
  CONFIGURATION_CONTEXT_FREE_DISCOUNT_NET_USAGE_DEN_DESC
  CONFIGURATION_MAX_BLOCK_CPU_USAGE_ASC
  CONFIGURATION_MAX_BLOCK_CPU_USAGE_DESC
  CONFIGURATION_TARGET_BLOCK_CPU_USAGE_PCT_ASC
  CONFIGURATION_TARGET_BLOCK_CPU_USAGE_PCT_DESC
  CONFIGURATION_MAX_TRANSACTION_CPU_USAGE_ASC
  CONFIGURATION_MAX_TRANSACTION_CPU_USAGE_DESC
  CONFIGURATION_MIN_TRANSACTION_CPU_USAGE_ASC
  CONFIGURATION_MIN_TRANSACTION_CPU_USAGE_DESC
  CONFIGURATION_MAX_TRANSACTION_LIFETIME_ASC
  CONFIGURATION_MAX_TRANSACTION_LIFETIME_DESC
  CONFIGURATION_DEFERRED_TRX_EXPIRATION_WINDOW_ASC
  CONFIGURATION_DEFERRED_TRX_EXPIRATION_WINDOW_DESC
  CONFIGURATION_MAX_TRANSACTION_DELAY_ASC
  CONFIGURATION_MAX_TRANSACTION_DELAY_DESC
  CONFIGURATION_MAX_INLINE_ACTION_SIZE_ASC
  CONFIGURATION_MAX_INLINE_ACTION_SIZE_DESC
  CONFIGURATION_MAX_INLINE_ACTION_DEPTH_ASC
  CONFIGURATION_MAX_INLINE_ACTION_DEPTH_DESC
  CONFIGURATION_MAX_AUTHORITY_DEPTH_ASC
  CONFIGURATION_MAX_AUTHORITY_DEPTH_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type GlobalProperty implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockIndex: BigInt!
  present: Boolean!
  proposedScheduleBlockNum: BigInt
  proposedScheduleVersion: BigInt
  proposedScheduleProducers: [ProducerKey]
  configurationMaxBlockNetUsage: BigFloat
  configurationTargetBlockNetUsagePct: BigInt
  configurationMaxTransactionNetUsage: BigInt
  configurationBasePerTransactionNetUsage: BigInt
  configurationNetUsageLeeway: BigInt
  configurationContextFreeDiscountNetUsageNum: BigInt
  configurationContextFreeDiscountNetUsageDen: BigInt
  configurationMaxBlockCpuUsage: BigInt
  configurationTargetBlockCpuUsagePct: BigInt
  configurationMaxTransactionCpuUsage: BigInt
  configurationMinTransactionCpuUsage: BigInt
  configurationMaxTransactionLifetime: BigInt
  configurationDeferredTrxExpirationWindow: BigInt
  configurationMaxTransactionDelay: BigInt
  configurationMaxInlineActionSize: BigInt
  configurationMaxInlineActionDepth: Int
  configurationMaxAuthorityDepth: Int
}

"""
A condition to be used against `GlobalProperty` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input GlobalPropertyCondition {
  """Checks for equality with the object’s `blockIndex` field."""
  blockIndex: BigInt

  """Checks for equality with the object’s `present` field."""
  present: Boolean

  """
  Checks for equality with the object’s `proposedScheduleBlockNum` field.
  """
  proposedScheduleBlockNum: BigInt

  """
  Checks for equality with the object’s `proposedScheduleVersion` field.
  """
  proposedScheduleVersion: BigInt

  """
  Checks for equality with the object’s `proposedScheduleProducers` field.
  """
  proposedScheduleProducers: [ProducerKeyInput]

  """
  Checks for equality with the object’s `configurationMaxBlockNetUsage` field.
  """
  configurationMaxBlockNetUsage: BigFloat

  """
  Checks for equality with the object’s `configurationTargetBlockNetUsagePct` field.
  """
  configurationTargetBlockNetUsagePct: BigInt

  """
  Checks for equality with the object’s `configurationMaxTransactionNetUsage` field.
  """
  configurationMaxTransactionNetUsage: BigInt

  """
  Checks for equality with the object’s `configurationBasePerTransactionNetUsage` field.
  """
  configurationBasePerTransactionNetUsage: BigInt

  """
  Checks for equality with the object’s `configurationNetUsageLeeway` field.
  """
  configurationNetUsageLeeway: BigInt

  """
  Checks for equality with the object’s `configurationContextFreeDiscountNetUsageNum` field.
  """
  configurationContextFreeDiscountNetUsageNum: BigInt

  """
  Checks for equality with the object’s `configurationContextFreeDiscountNetUsageDen` field.
  """
  configurationContextFreeDiscountNetUsageDen: BigInt

  """
  Checks for equality with the object’s `configurationMaxBlockCpuUsage` field.
  """
  configurationMaxBlockCpuUsage: BigInt

  """
  Checks for equality with the object’s `configurationTargetBlockCpuUsagePct` field.
  """
  configurationTargetBlockCpuUsagePct: BigInt

  """
  Checks for equality with the object’s `configurationMaxTransactionCpuUsage` field.
  """
  configurationMaxTransactionCpuUsage: BigInt

  """
  Checks for equality with the object’s `configurationMinTransactionCpuUsage` field.
  """
  configurationMinTransactionCpuUsage: BigInt

  """
  Checks for equality with the object’s `configurationMaxTransactionLifetime` field.
  """
  configurationMaxTransactionLifetime: BigInt

  """
  Checks for equality with the object’s `configurationDeferredTrxExpirationWindow` field.
  """
  configurationDeferredTrxExpirationWindow: BigInt

  """
  Checks for equality with the object’s `configurationMaxTransactionDelay` field.
  """
  configurationMaxTransactionDelay: BigInt

  """
  Checks for equality with the object’s `configurationMaxInlineActionSize` field.
  """
  configurationMaxInlineActionSize: BigInt

  """
  Checks for equality with the object’s `configurationMaxInlineActionDepth` field.
  """
  configurationMaxInlineActionDepth: Int

  """
  Checks for equality with the object’s `configurationMaxAuthorityDepth` field.
  """
  configurationMaxAuthorityDepth: Int
}

"""An input for mutations affecting `GlobalProperty`"""
input GlobalPropertyInput {
  blockIndex: BigInt!
  present: Boolean!
  proposedScheduleBlockNum: BigInt
  proposedScheduleVersion: BigInt
  proposedScheduleProducers: [ProducerKeyInput]
  configurationMaxBlockNetUsage: BigFloat
  configurationTargetBlockNetUsagePct: BigInt
  configurationMaxTransactionNetUsage: BigInt
  configurationBasePerTransactionNetUsage: BigInt
  configurationNetUsageLeeway: BigInt
  configurationContextFreeDiscountNetUsageNum: BigInt
  configurationContextFreeDiscountNetUsageDen: BigInt
  configurationMaxBlockCpuUsage: BigInt
  configurationTargetBlockCpuUsagePct: BigInt
  configurationMaxTransactionCpuUsage: BigInt
  configurationMinTransactionCpuUsage: BigInt
  configurationMaxTransactionLifetime: BigInt
  configurationDeferredTrxExpirationWindow: BigInt
  configurationMaxTransactionDelay: BigInt
  configurationMaxInlineActionSize: BigInt
  configurationMaxInlineActionDepth: Int
  configurationMaxAuthorityDepth: Int
}

"""
Represents an update to a `GlobalProperty`. Fields that are set will be updated.
"""
input GlobalPropertyPatch {
  blockIndex: BigInt
  present: Boolean
  proposedScheduleBlockNum: BigInt
  proposedScheduleVersion: BigInt
  proposedScheduleProducers: [ProducerKeyInput]
  configurationMaxBlockNetUsage: BigFloat
  configurationTargetBlockNetUsagePct: BigInt
  configurationMaxTransactionNetUsage: BigInt
  configurationBasePerTransactionNetUsage: BigInt
  configurationNetUsageLeeway: BigInt
  configurationContextFreeDiscountNetUsageNum: BigInt
  configurationContextFreeDiscountNetUsageDen: BigInt
  configurationMaxBlockCpuUsage: BigInt
  configurationTargetBlockCpuUsagePct: BigInt
  configurationMaxTransactionCpuUsage: BigInt
  configurationMinTransactionCpuUsage: BigInt
  configurationMaxTransactionLifetime: BigInt
  configurationDeferredTrxExpirationWindow: BigInt
  configurationMaxTransactionDelay: BigInt
  configurationMaxInlineActionSize: BigInt
  configurationMaxInlineActionDepth: Int
  configurationMaxAuthorityDepth: Int
}

type KeyWeight {
  key: String
  weight: Int
}

"""An input for mutations affecting `KeyWeight`"""
input KeyWeightInput {
  key: String
  weight: Int
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Account`."""
  createAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAccountInput!
  ): CreateAccountPayload

  """Creates a single `ActionTrace`."""
  createActionTrace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateActionTraceInput!
  ): CreateActionTracePayload

  """Creates a single `ActionTraceAuthSequence`."""
  createActionTraceAuthSequence(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateActionTraceAuthSequenceInput!
  ): CreateActionTraceAuthSequencePayload

  """Creates a single `ActionTraceAuthorization`."""
  createActionTraceAuthorization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateActionTraceAuthorizationInput!
  ): CreateActionTraceAuthorizationPayload

  """Creates a single `ActionTraceRamDelta`."""
  createActionTraceRamDelta(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateActionTraceRamDeltaInput!
  ): CreateActionTraceRamDeltaPayload

  """Creates a single `BlockInfo`."""
  createBlockInfo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBlockInfoInput!
  ): CreateBlockInfoPayload

  """Creates a single `ContractIndex128`."""
  createContractIndex128(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateContractIndex128Input!
  ): CreateContractIndex128Payload

  """Creates a single `ContractIndex256`."""
  createContractIndex256(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateContractIndex256Input!
  ): CreateContractIndex256Payload

  """Creates a single `ContractIndex64`."""
  createContractIndex64(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateContractIndex64Input!
  ): CreateContractIndex64Payload

  """Creates a single `ContractIndexDouble`."""
  createContractIndexDouble(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateContractIndexDoubleInput!
  ): CreateContractIndexDoublePayload

  """Creates a single `ContractIndexLongDouble`."""
  createContractIndexLongDouble(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateContractIndexLongDoubleInput!
  ): CreateContractIndexLongDoublePayload

  """Creates a single `ContractRow`."""
  createContractRow(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateContractRowInput!
  ): CreateContractRowPayload

  """Creates a single `ContractTable`."""
  createContractTable(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateContractTableInput!
  ): CreateContractTablePayload

  """Creates a single `FillStatus`."""
  createFillStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFillStatusInput!
  ): CreateFillStatusPayload

  """Creates a single `GeneratedTransaction`."""
  createGeneratedTransaction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGeneratedTransactionInput!
  ): CreateGeneratedTransactionPayload

  """Creates a single `GlobalProperty`."""
  createGlobalProperty(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGlobalPropertyInput!
  ): CreateGlobalPropertyPayload

  """Creates a single `Permission`."""
  createPermission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePermissionInput!
  ): CreatePermissionPayload

  """Creates a single `PermissionLink`."""
  createPermissionLink(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePermissionLinkInput!
  ): CreatePermissionLinkPayload

  """Creates a single `ReceivedBlock`."""
  createReceivedBlock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReceivedBlockInput!
  ): CreateReceivedBlockPayload

  """Creates a single `ResourceLimit`."""
  createResourceLimit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateResourceLimitInput!
  ): CreateResourceLimitPayload

  """Creates a single `ResourceLimitsConfig`."""
  createResourceLimitsConfig(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateResourceLimitsConfigInput!
  ): CreateResourceLimitsConfigPayload

  """Creates a single `ResourceLimitsState`."""
  createResourceLimitsState(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateResourceLimitsStateInput!
  ): CreateResourceLimitsStatePayload

  """Creates a single `ResourceUsage`."""
  createResourceUsage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateResourceUsageInput!
  ): CreateResourceUsagePayload

  """Creates a single `TransactionTrace`."""
  createTransactionTrace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTransactionTraceInput!
  ): CreateTransactionTracePayload

  """Updates a single `Account` using its globally unique id and a patch."""
  updateAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAccountInput!
  ): UpdateAccountPayload

  """Updates a single `Account` using a unique key and a patch."""
  updateAccountByBlockIndexAndPresentAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAccountByBlockIndexAndPresentAndNameInput!
  ): UpdateAccountPayload

  """
  Updates a single `ActionTrace` using its globally unique id and a patch.
  """
  updateActionTrace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateActionTraceInput!
  ): UpdateActionTracePayload

  """Updates a single `ActionTrace` using a unique key and a patch."""
  updateActionTraceByBlockIndexAndTransactionIdAndActionIndex(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateActionTraceByBlockIndexAndTransactionIdAndActionIndexInput!
  ): UpdateActionTracePayload

  """
  Updates a single `ActionTraceAuthSequence` using its globally unique id and a patch.
  """
  updateActionTraceAuthSequence(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateActionTraceAuthSequenceInput!
  ): UpdateActionTraceAuthSequencePayload

  """
  Updates a single `ActionTraceAuthSequence` using a unique key and a patch.
  """
  updateActionTraceAuthSequenceByBlockIndexAndTransactionIdAndActionIndexAndIndex(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateActionTraceAuthSequenceByBlockIndexAndTransactionIdAndActionIndexAndIndexInput!
  ): UpdateActionTraceAuthSequencePayload

  """
  Updates a single `ActionTraceAuthorization` using its globally unique id and a patch.
  """
  updateActionTraceAuthorization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateActionTraceAuthorizationInput!
  ): UpdateActionTraceAuthorizationPayload

  """
  Updates a single `ActionTraceAuthorization` using a unique key and a patch.
  """
  updateActionTraceAuthorizationByBlockIndexAndTransactionIdAndActionIndexAndIndex(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateActionTraceAuthorizationByBlockIndexAndTransactionIdAndActionIndexAndIndexInput!
  ): UpdateActionTraceAuthorizationPayload

  """
  Updates a single `ActionTraceRamDelta` using its globally unique id and a patch.
  """
  updateActionTraceRamDelta(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateActionTraceRamDeltaInput!
  ): UpdateActionTraceRamDeltaPayload

  """
  Updates a single `ActionTraceRamDelta` using a unique key and a patch.
  """
  updateActionTraceRamDeltaByBlockIndexAndTransactionIdAndActionIndexAndIndex(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateActionTraceRamDeltaByBlockIndexAndTransactionIdAndActionIndexAndIndexInput!
  ): UpdateActionTraceRamDeltaPayload

  """
  Updates a single `BlockInfo` using its globally unique id and a patch.
  """
  updateBlockInfo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBlockInfoInput!
  ): UpdateBlockInfoPayload

  """Updates a single `BlockInfo` using a unique key and a patch."""
  updateBlockInfoByBlockIndex(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBlockInfoByBlockIndexInput!
  ): UpdateBlockInfoPayload

  """
  Updates a single `ContractIndex128` using its globally unique id and a patch.
  """
  updateContractIndex128(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContractIndex128Input!
  ): UpdateContractIndex128Payload

  """Updates a single `ContractIndex128` using a unique key and a patch."""
  updateContractIndex128ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI128Pkey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContractIndex128ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI128PkeyInput!
  ): UpdateContractIndex128Payload

  """
  Updates a single `ContractIndex256` using its globally unique id and a patch.
  """
  updateContractIndex256(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContractIndex256Input!
  ): UpdateContractIndex256Payload

  """Updates a single `ContractIndex256` using a unique key and a patch."""
  updateContractIndex256ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI256Pkey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContractIndex256ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI256PkeyInput!
  ): UpdateContractIndex256Payload

  """
  Updates a single `ContractIndex64` using its globally unique id and a patch.
  """
  updateContractIndex64(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContractIndex64Input!
  ): UpdateContractIndex64Payload

  """Updates a single `ContractIndex64` using a unique key and a patch."""
  updateContractIndex64ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI64Pkey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContractIndex64ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI64PkeyInput!
  ): UpdateContractIndex64Payload

  """
  Updates a single `ContractIndexDouble` using its globally unique id and a patch.
  """
  updateContractIndexDouble(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContractIndexDoubleInput!
  ): UpdateContractIndexDoublePayload

  """
  Updates a single `ContractIndexDouble` using a unique key and a patch.
  """
  updateContractIndexDoubleByBlockIndexAndPresentAndCodeAndScopeAndTableAndDoublePkey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContractIndexDoubleByBlockIndexAndPresentAndCodeAndScopeAndTableAndDoublePkeyInput!
  ): UpdateContractIndexDoublePayload

  """
  Updates a single `ContractIndexLongDouble` using its globally unique id and a patch.
  """
  updateContractIndexLongDouble(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContractIndexLongDoubleInput!
  ): UpdateContractIndexLongDoublePayload

  """
  Updates a single `ContractIndexLongDouble` using a unique key and a patch.
  """
  updateContractIndexLongDoubleByBlockIndexAndPresentAndCodeAndScopeAndTableAndLongDoublePkey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContractIndexLongDoubleByBlockIndexAndPresentAndCodeAndScopeAndTableAndLongDoublePkeyInput!
  ): UpdateContractIndexLongDoublePayload

  """
  Updates a single `ContractRow` using its globally unique id and a patch.
  """
  updateContractRow(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContractRowInput!
  ): UpdateContractRowPayload

  """Updates a single `ContractRow` using a unique key and a patch."""
  updateContractRowByBlockIndexAndPresentAndCodeAndScopeAndTableAndCrowPkey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContractRowByBlockIndexAndPresentAndCodeAndScopeAndTableAndCrowPkeyInput!
  ): UpdateContractRowPayload

  """
  Updates a single `ContractTable` using its globally unique id and a patch.
  """
  updateContractTable(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContractTableInput!
  ): UpdateContractTablePayload

  """Updates a single `ContractTable` using a unique key and a patch."""
  updateContractTableByBlockIndexAndPresentAndCodeAndScopeAndTable(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContractTableByBlockIndexAndPresentAndCodeAndScopeAndTableInput!
  ): UpdateContractTablePayload

  """
  Updates a single `GeneratedTransaction` using its globally unique id and a patch.
  """
  updateGeneratedTransaction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGeneratedTransactionInput!
  ): UpdateGeneratedTransactionPayload

  """
  Updates a single `GeneratedTransaction` using a unique key and a patch.
  """
  updateGeneratedTransactionByBlockIndexAndPresentAndSenderAndSenderId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGeneratedTransactionByBlockIndexAndPresentAndSenderAndSenderIdInput!
  ): UpdateGeneratedTransactionPayload

  """
  Updates a single `GlobalProperty` using its globally unique id and a patch.
  """
  updateGlobalProperty(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGlobalPropertyInput!
  ): UpdateGlobalPropertyPayload

  """Updates a single `GlobalProperty` using a unique key and a patch."""
  updateGlobalPropertyByBlockIndexAndPresent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGlobalPropertyByBlockIndexAndPresentInput!
  ): UpdateGlobalPropertyPayload

  """
  Updates a single `Permission` using its globally unique id and a patch.
  """
  updatePermission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePermissionInput!
  ): UpdatePermissionPayload

  """Updates a single `Permission` using a unique key and a patch."""
  updatePermissionByBlockIndexAndPresentAndOwnerAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePermissionByBlockIndexAndPresentAndOwnerAndNameInput!
  ): UpdatePermissionPayload

  """
  Updates a single `PermissionLink` using its globally unique id and a patch.
  """
  updatePermissionLink(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePermissionLinkInput!
  ): UpdatePermissionLinkPayload

  """Updates a single `PermissionLink` using a unique key and a patch."""
  updatePermissionLinkByBlockIndexAndPresentAndAccountAndCodeAndMessageType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePermissionLinkByBlockIndexAndPresentAndAccountAndCodeAndMessageTypeInput!
  ): UpdatePermissionLinkPayload

  """
  Updates a single `ReceivedBlock` using its globally unique id and a patch.
  """
  updateReceivedBlock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReceivedBlockInput!
  ): UpdateReceivedBlockPayload

  """Updates a single `ReceivedBlock` using a unique key and a patch."""
  updateReceivedBlockByBlockIndex(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReceivedBlockByBlockIndexInput!
  ): UpdateReceivedBlockPayload

  """
  Updates a single `ResourceLimit` using its globally unique id and a patch.
  """
  updateResourceLimit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateResourceLimitInput!
  ): UpdateResourceLimitPayload

  """Updates a single `ResourceLimit` using a unique key and a patch."""
  updateResourceLimitByBlockIndexAndPresentAndOwner(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateResourceLimitByBlockIndexAndPresentAndOwnerInput!
  ): UpdateResourceLimitPayload

  """
  Updates a single `ResourceLimitsConfig` using its globally unique id and a patch.
  """
  updateResourceLimitsConfig(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateResourceLimitsConfigInput!
  ): UpdateResourceLimitsConfigPayload

  """
  Updates a single `ResourceLimitsConfig` using a unique key and a patch.
  """
  updateResourceLimitsConfigByBlockIndexAndPresent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateResourceLimitsConfigByBlockIndexAndPresentInput!
  ): UpdateResourceLimitsConfigPayload

  """
  Updates a single `ResourceLimitsState` using its globally unique id and a patch.
  """
  updateResourceLimitsState(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateResourceLimitsStateInput!
  ): UpdateResourceLimitsStatePayload

  """
  Updates a single `ResourceLimitsState` using a unique key and a patch.
  """
  updateResourceLimitsStateByBlockIndexAndPresent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateResourceLimitsStateByBlockIndexAndPresentInput!
  ): UpdateResourceLimitsStatePayload

  """
  Updates a single `ResourceUsage` using its globally unique id and a patch.
  """
  updateResourceUsage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateResourceUsageInput!
  ): UpdateResourceUsagePayload

  """Updates a single `ResourceUsage` using a unique key and a patch."""
  updateResourceUsageByBlockIndexAndPresentAndOwner(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateResourceUsageByBlockIndexAndPresentAndOwnerInput!
  ): UpdateResourceUsagePayload

  """
  Updates a single `TransactionTrace` using its globally unique id and a patch.
  """
  updateTransactionTrace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTransactionTraceInput!
  ): UpdateTransactionTracePayload

  """Updates a single `TransactionTrace` using a unique key and a patch."""
  updateTransactionTraceByBlockIndexAndTransactionId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTransactionTraceByBlockIndexAndTransactionIdInput!
  ): UpdateTransactionTracePayload

  """Deletes a single `Account` using its globally unique id."""
  deleteAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAccountInput!
  ): DeleteAccountPayload

  """Deletes a single `Account` using a unique key."""
  deleteAccountByBlockIndexAndPresentAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAccountByBlockIndexAndPresentAndNameInput!
  ): DeleteAccountPayload

  """Deletes a single `ActionTrace` using its globally unique id."""
  deleteActionTrace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteActionTraceInput!
  ): DeleteActionTracePayload

  """Deletes a single `ActionTrace` using a unique key."""
  deleteActionTraceByBlockIndexAndTransactionIdAndActionIndex(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteActionTraceByBlockIndexAndTransactionIdAndActionIndexInput!
  ): DeleteActionTracePayload

  """
  Deletes a single `ActionTraceAuthSequence` using its globally unique id.
  """
  deleteActionTraceAuthSequence(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteActionTraceAuthSequenceInput!
  ): DeleteActionTraceAuthSequencePayload

  """Deletes a single `ActionTraceAuthSequence` using a unique key."""
  deleteActionTraceAuthSequenceByBlockIndexAndTransactionIdAndActionIndexAndIndex(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteActionTraceAuthSequenceByBlockIndexAndTransactionIdAndActionIndexAndIndexInput!
  ): DeleteActionTraceAuthSequencePayload

  """
  Deletes a single `ActionTraceAuthorization` using its globally unique id.
  """
  deleteActionTraceAuthorization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteActionTraceAuthorizationInput!
  ): DeleteActionTraceAuthorizationPayload

  """Deletes a single `ActionTraceAuthorization` using a unique key."""
  deleteActionTraceAuthorizationByBlockIndexAndTransactionIdAndActionIndexAndIndex(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteActionTraceAuthorizationByBlockIndexAndTransactionIdAndActionIndexAndIndexInput!
  ): DeleteActionTraceAuthorizationPayload

  """Deletes a single `ActionTraceRamDelta` using its globally unique id."""
  deleteActionTraceRamDelta(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteActionTraceRamDeltaInput!
  ): DeleteActionTraceRamDeltaPayload

  """Deletes a single `ActionTraceRamDelta` using a unique key."""
  deleteActionTraceRamDeltaByBlockIndexAndTransactionIdAndActionIndexAndIndex(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteActionTraceRamDeltaByBlockIndexAndTransactionIdAndActionIndexAndIndexInput!
  ): DeleteActionTraceRamDeltaPayload

  """Deletes a single `BlockInfo` using its globally unique id."""
  deleteBlockInfo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBlockInfoInput!
  ): DeleteBlockInfoPayload

  """Deletes a single `BlockInfo` using a unique key."""
  deleteBlockInfoByBlockIndex(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBlockInfoByBlockIndexInput!
  ): DeleteBlockInfoPayload

  """Deletes a single `ContractIndex128` using its globally unique id."""
  deleteContractIndex128(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContractIndex128Input!
  ): DeleteContractIndex128Payload

  """Deletes a single `ContractIndex128` using a unique key."""
  deleteContractIndex128ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI128Pkey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContractIndex128ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI128PkeyInput!
  ): DeleteContractIndex128Payload

  """Deletes a single `ContractIndex256` using its globally unique id."""
  deleteContractIndex256(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContractIndex256Input!
  ): DeleteContractIndex256Payload

  """Deletes a single `ContractIndex256` using a unique key."""
  deleteContractIndex256ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI256Pkey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContractIndex256ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI256PkeyInput!
  ): DeleteContractIndex256Payload

  """Deletes a single `ContractIndex64` using its globally unique id."""
  deleteContractIndex64(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContractIndex64Input!
  ): DeleteContractIndex64Payload

  """Deletes a single `ContractIndex64` using a unique key."""
  deleteContractIndex64ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI64Pkey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContractIndex64ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI64PkeyInput!
  ): DeleteContractIndex64Payload

  """Deletes a single `ContractIndexDouble` using its globally unique id."""
  deleteContractIndexDouble(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContractIndexDoubleInput!
  ): DeleteContractIndexDoublePayload

  """Deletes a single `ContractIndexDouble` using a unique key."""
  deleteContractIndexDoubleByBlockIndexAndPresentAndCodeAndScopeAndTableAndDoublePkey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContractIndexDoubleByBlockIndexAndPresentAndCodeAndScopeAndTableAndDoublePkeyInput!
  ): DeleteContractIndexDoublePayload

  """
  Deletes a single `ContractIndexLongDouble` using its globally unique id.
  """
  deleteContractIndexLongDouble(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContractIndexLongDoubleInput!
  ): DeleteContractIndexLongDoublePayload

  """Deletes a single `ContractIndexLongDouble` using a unique key."""
  deleteContractIndexLongDoubleByBlockIndexAndPresentAndCodeAndScopeAndTableAndLongDoublePkey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContractIndexLongDoubleByBlockIndexAndPresentAndCodeAndScopeAndTableAndLongDoublePkeyInput!
  ): DeleteContractIndexLongDoublePayload

  """Deletes a single `ContractRow` using its globally unique id."""
  deleteContractRow(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContractRowInput!
  ): DeleteContractRowPayload

  """Deletes a single `ContractRow` using a unique key."""
  deleteContractRowByBlockIndexAndPresentAndCodeAndScopeAndTableAndCrowPkey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContractRowByBlockIndexAndPresentAndCodeAndScopeAndTableAndCrowPkeyInput!
  ): DeleteContractRowPayload

  """Deletes a single `ContractTable` using its globally unique id."""
  deleteContractTable(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContractTableInput!
  ): DeleteContractTablePayload

  """Deletes a single `ContractTable` using a unique key."""
  deleteContractTableByBlockIndexAndPresentAndCodeAndScopeAndTable(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContractTableByBlockIndexAndPresentAndCodeAndScopeAndTableInput!
  ): DeleteContractTablePayload

  """Deletes a single `GeneratedTransaction` using its globally unique id."""
  deleteGeneratedTransaction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGeneratedTransactionInput!
  ): DeleteGeneratedTransactionPayload

  """Deletes a single `GeneratedTransaction` using a unique key."""
  deleteGeneratedTransactionByBlockIndexAndPresentAndSenderAndSenderId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGeneratedTransactionByBlockIndexAndPresentAndSenderAndSenderIdInput!
  ): DeleteGeneratedTransactionPayload

  """Deletes a single `GlobalProperty` using its globally unique id."""
  deleteGlobalProperty(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGlobalPropertyInput!
  ): DeleteGlobalPropertyPayload

  """Deletes a single `GlobalProperty` using a unique key."""
  deleteGlobalPropertyByBlockIndexAndPresent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGlobalPropertyByBlockIndexAndPresentInput!
  ): DeleteGlobalPropertyPayload

  """Deletes a single `Permission` using its globally unique id."""
  deletePermission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePermissionInput!
  ): DeletePermissionPayload

  """Deletes a single `Permission` using a unique key."""
  deletePermissionByBlockIndexAndPresentAndOwnerAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePermissionByBlockIndexAndPresentAndOwnerAndNameInput!
  ): DeletePermissionPayload

  """Deletes a single `PermissionLink` using its globally unique id."""
  deletePermissionLink(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePermissionLinkInput!
  ): DeletePermissionLinkPayload

  """Deletes a single `PermissionLink` using a unique key."""
  deletePermissionLinkByBlockIndexAndPresentAndAccountAndCodeAndMessageType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePermissionLinkByBlockIndexAndPresentAndAccountAndCodeAndMessageTypeInput!
  ): DeletePermissionLinkPayload

  """Deletes a single `ReceivedBlock` using its globally unique id."""
  deleteReceivedBlock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReceivedBlockInput!
  ): DeleteReceivedBlockPayload

  """Deletes a single `ReceivedBlock` using a unique key."""
  deleteReceivedBlockByBlockIndex(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReceivedBlockByBlockIndexInput!
  ): DeleteReceivedBlockPayload

  """Deletes a single `ResourceLimit` using its globally unique id."""
  deleteResourceLimit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteResourceLimitInput!
  ): DeleteResourceLimitPayload

  """Deletes a single `ResourceLimit` using a unique key."""
  deleteResourceLimitByBlockIndexAndPresentAndOwner(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteResourceLimitByBlockIndexAndPresentAndOwnerInput!
  ): DeleteResourceLimitPayload

  """Deletes a single `ResourceLimitsConfig` using its globally unique id."""
  deleteResourceLimitsConfig(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteResourceLimitsConfigInput!
  ): DeleteResourceLimitsConfigPayload

  """Deletes a single `ResourceLimitsConfig` using a unique key."""
  deleteResourceLimitsConfigByBlockIndexAndPresent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteResourceLimitsConfigByBlockIndexAndPresentInput!
  ): DeleteResourceLimitsConfigPayload

  """Deletes a single `ResourceLimitsState` using its globally unique id."""
  deleteResourceLimitsState(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteResourceLimitsStateInput!
  ): DeleteResourceLimitsStatePayload

  """Deletes a single `ResourceLimitsState` using a unique key."""
  deleteResourceLimitsStateByBlockIndexAndPresent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteResourceLimitsStateByBlockIndexAndPresentInput!
  ): DeleteResourceLimitsStatePayload

  """Deletes a single `ResourceUsage` using its globally unique id."""
  deleteResourceUsage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteResourceUsageInput!
  ): DeleteResourceUsagePayload

  """Deletes a single `ResourceUsage` using a unique key."""
  deleteResourceUsageByBlockIndexAndPresentAndOwner(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteResourceUsageByBlockIndexAndPresentAndOwnerInput!
  ): DeleteResourceUsagePayload

  """Deletes a single `TransactionTrace` using its globally unique id."""
  deleteTransactionTrace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTransactionTraceInput!
  ): DeleteTransactionTracePayload

  """Deletes a single `TransactionTrace` using a unique key."""
  deleteTransactionTraceByBlockIndexAndTransactionId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTransactionTraceByBlockIndexAndTransactionIdInput!
  ): DeleteTransactionTracePayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

type Permission implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockIndex: BigInt!
  present: Boolean!
  owner: String!
  name: String!
  parent: String
  lastUpdated: Datetime
  authThreshold: BigInt
  authKeys: [KeyWeight]
  authAccounts: [PermissionLevelWeight]
  authWaits: [WaitWeight]
}

"""
A condition to be used against `Permission` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PermissionCondition {
  """Checks for equality with the object’s `blockIndex` field."""
  blockIndex: BigInt

  """Checks for equality with the object’s `present` field."""
  present: Boolean

  """Checks for equality with the object’s `owner` field."""
  owner: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `parent` field."""
  parent: String

  """Checks for equality with the object’s `lastUpdated` field."""
  lastUpdated: Datetime

  """Checks for equality with the object’s `authThreshold` field."""
  authThreshold: BigInt

  """Checks for equality with the object’s `authKeys` field."""
  authKeys: [KeyWeightInput]

  """Checks for equality with the object’s `authAccounts` field."""
  authAccounts: [PermissionLevelWeightInput]

  """Checks for equality with the object’s `authWaits` field."""
  authWaits: [WaitWeightInput]
}

"""An input for mutations affecting `Permission`"""
input PermissionInput {
  blockIndex: BigInt!
  present: Boolean!
  owner: String!
  name: String!
  parent: String
  lastUpdated: Datetime
  authThreshold: BigInt
  authKeys: [KeyWeightInput]
  authAccounts: [PermissionLevelWeightInput]
  authWaits: [WaitWeightInput]
}

type PermissionLevelWeight {
  permissionActor: String
  permissionPermission: String
  weight: Int
}

"""An input for mutations affecting `PermissionLevelWeight`"""
input PermissionLevelWeightInput {
  permissionActor: String
  permissionPermission: String
  weight: Int
}

type PermissionLink implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockIndex: BigInt!
  present: Boolean!
  account: String!
  code: String!
  messageType: String!
  requiredPermission: String
}

"""
A condition to be used against `PermissionLink` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PermissionLinkCondition {
  """Checks for equality with the object’s `blockIndex` field."""
  blockIndex: BigInt

  """Checks for equality with the object’s `present` field."""
  present: Boolean

  """Checks for equality with the object’s `account` field."""
  account: String

  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `messageType` field."""
  messageType: String

  """Checks for equality with the object’s `requiredPermission` field."""
  requiredPermission: String
}

"""An input for mutations affecting `PermissionLink`"""
input PermissionLinkInput {
  blockIndex: BigInt!
  present: Boolean!
  account: String!
  code: String!
  messageType: String!
  requiredPermission: String
}

"""
Represents an update to a `PermissionLink`. Fields that are set will be updated.
"""
input PermissionLinkPatch {
  blockIndex: BigInt
  present: Boolean
  account: String
  code: String
  messageType: String
  requiredPermission: String
}

"""A connection to a list of `PermissionLink` values."""
type PermissionLinksConnection {
  """A list of `PermissionLink` objects."""
  nodes: [PermissionLink]!

  """
  A list of edges which contains the `PermissionLink` and cursor to aid in pagination.
  """
  edges: [PermissionLinksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PermissionLink` you could get from the connection.
  """
  totalCount: Int
}

"""A `PermissionLink` edge in the connection."""
type PermissionLinksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PermissionLink` at the end of the edge."""
  node: PermissionLink
}

"""Methods to use when ordering `PermissionLink`."""
enum PermissionLinksOrderBy {
  NATURAL
  BLOCK_INDEX_ASC
  BLOCK_INDEX_DESC
  PRESENT_ASC
  PRESENT_DESC
  ACCOUNT_ASC
  ACCOUNT_DESC
  CODE_ASC
  CODE_DESC
  MESSAGE_TYPE_ASC
  MESSAGE_TYPE_DESC
  REQUIRED_PERMISSION_ASC
  REQUIRED_PERMISSION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Permission`. Fields that are set will be updated.
"""
input PermissionPatch {
  blockIndex: BigInt
  present: Boolean
  owner: String
  name: String
  parent: String
  lastUpdated: Datetime
  authThreshold: BigInt
  authKeys: [KeyWeightInput]
  authAccounts: [PermissionLevelWeightInput]
  authWaits: [WaitWeightInput]
}

"""A connection to a list of `Permission` values."""
type PermissionsConnection {
  """A list of `Permission` objects."""
  nodes: [Permission]!

  """
  A list of edges which contains the `Permission` and cursor to aid in pagination.
  """
  edges: [PermissionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Permission` you could get from the connection."""
  totalCount: Int
}

"""A `Permission` edge in the connection."""
type PermissionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Permission` at the end of the edge."""
  node: Permission
}

"""Methods to use when ordering `Permission`."""
enum PermissionsOrderBy {
  NATURAL
  BLOCK_INDEX_ASC
  BLOCK_INDEX_DESC
  PRESENT_ASC
  PRESENT_DESC
  OWNER_ASC
  OWNER_DESC
  NAME_ASC
  NAME_DESC
  PARENT_ASC
  PARENT_DESC
  LAST_UPDATED_ASC
  LAST_UPDATED_DESC
  AUTH_THRESHOLD_ASC
  AUTH_THRESHOLD_DESC
  AUTH_KEYS_ASC
  AUTH_KEYS_DESC
  AUTH_ACCOUNTS_ASC
  AUTH_ACCOUNTS_DESC
  AUTH_WAITS_ASC
  AUTH_WAITS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ProducerKey {
  producerName: String
  blockSigningKey: String
}

"""An input for mutations affecting `ProducerKey`"""
input ProducerKeyInput {
  producerName: String
  blockSigningKey: String
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads and enables pagination through a set of `Account`."""
  allAccounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition
  ): AccountsConnection

  """Reads and enables pagination through a set of `ActionTrace`."""
  allActionTraces(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ActionTrace`."""
    orderBy: [ActionTracesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActionTraceCondition
  ): ActionTracesConnection

  """
  Reads and enables pagination through a set of `ActionTraceAuthSequence`.
  """
  allActionTraceAuthSequences(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ActionTraceAuthSequence`."""
    orderBy: [ActionTraceAuthSequencesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActionTraceAuthSequenceCondition
  ): ActionTraceAuthSequencesConnection

  """
  Reads and enables pagination through a set of `ActionTraceAuthorization`.
  """
  allActionTraceAuthorizations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ActionTraceAuthorization`."""
    orderBy: [ActionTraceAuthorizationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActionTraceAuthorizationCondition
  ): ActionTraceAuthorizationsConnection

  """Reads and enables pagination through a set of `ActionTraceRamDelta`."""
  allActionTraceRamDeltas(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ActionTraceRamDelta`."""
    orderBy: [ActionTraceRamDeltasOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActionTraceRamDeltaCondition
  ): ActionTraceRamDeltasConnection

  """Reads and enables pagination through a set of `BlockInfo`."""
  allBlockInfos(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BlockInfo`."""
    orderBy: [BlockInfosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BlockInfoCondition
  ): BlockInfosConnection

  """Reads and enables pagination through a set of `ContractIndex128`."""
  allContractIndex128S(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ContractIndex128`."""
    orderBy: [ContractIndex128SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContractIndex128Condition
  ): ContractIndex128SConnection

  """Reads and enables pagination through a set of `ContractIndex256`."""
  allContractIndex256S(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ContractIndex256`."""
    orderBy: [ContractIndex256SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContractIndex256Condition
  ): ContractIndex256SConnection

  """Reads and enables pagination through a set of `ContractIndex64`."""
  allContractIndex64S(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ContractIndex64`."""
    orderBy: [ContractIndex64SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContractIndex64Condition
  ): ContractIndex64SConnection

  """Reads and enables pagination through a set of `ContractIndexDouble`."""
  allContractIndexDoubles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ContractIndexDouble`."""
    orderBy: [ContractIndexDoublesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContractIndexDoubleCondition
  ): ContractIndexDoublesConnection

  """
  Reads and enables pagination through a set of `ContractIndexLongDouble`.
  """
  allContractIndexLongDoubles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ContractIndexLongDouble`."""
    orderBy: [ContractIndexLongDoublesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContractIndexLongDoubleCondition
  ): ContractIndexLongDoublesConnection

  """Reads and enables pagination through a set of `ContractRow`."""
  allContractRows(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ContractRow`."""
    orderBy: [ContractRowsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContractRowCondition
  ): ContractRowsConnection

  """Reads and enables pagination through a set of `ContractTable`."""
  allContractTables(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ContractTable`."""
    orderBy: [ContractTablesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContractTableCondition
  ): ContractTablesConnection

  """Reads and enables pagination through a set of `FillStatus`."""
  allFillStatuses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FillStatus`."""
    orderBy: [FillStatusesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FillStatusCondition
  ): FillStatusesConnection

  """Reads and enables pagination through a set of `GeneratedTransaction`."""
  allGeneratedTransactions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GeneratedTransaction`."""
    orderBy: [GeneratedTransactionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GeneratedTransactionCondition
  ): GeneratedTransactionsConnection

  """Reads and enables pagination through a set of `GlobalProperty`."""
  allGlobalProperties(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GlobalProperty`."""
    orderBy: [GlobalPropertiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GlobalPropertyCondition
  ): GlobalPropertiesConnection

  """Reads and enables pagination through a set of `Permission`."""
  allPermissions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Permission`."""
    orderBy: [PermissionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PermissionCondition
  ): PermissionsConnection

  """Reads and enables pagination through a set of `PermissionLink`."""
  allPermissionLinks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PermissionLink`."""
    orderBy: [PermissionLinksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PermissionLinkCondition
  ): PermissionLinksConnection

  """Reads and enables pagination through a set of `ReceivedBlock`."""
  allReceivedBlocks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReceivedBlock`."""
    orderBy: [ReceivedBlocksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReceivedBlockCondition
  ): ReceivedBlocksConnection

  """Reads and enables pagination through a set of `ResourceLimit`."""
  allResourceLimits(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ResourceLimit`."""
    orderBy: [ResourceLimitsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ResourceLimitCondition
  ): ResourceLimitsConnection

  """Reads and enables pagination through a set of `ResourceLimitsConfig`."""
  allResourceLimitsConfigs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ResourceLimitsConfig`."""
    orderBy: [ResourceLimitsConfigsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ResourceLimitsConfigCondition
  ): ResourceLimitsConfigsConnection

  """Reads and enables pagination through a set of `ResourceLimitsState`."""
  allResourceLimitsStates(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ResourceLimitsState`."""
    orderBy: [ResourceLimitsStatesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ResourceLimitsStateCondition
  ): ResourceLimitsStatesConnection

  """Reads and enables pagination through a set of `ResourceUsage`."""
  allResourceUsages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ResourceUsage`."""
    orderBy: [ResourceUsagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ResourceUsageCondition
  ): ResourceUsagesConnection

  """Reads and enables pagination through a set of `TransactionTrace`."""
  allTransactionTraces(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TransactionTrace`."""
    orderBy: [TransactionTracesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TransactionTraceCondition
  ): TransactionTracesConnection
  accountByBlockIndexAndPresentAndName(blockIndex: BigInt!, present: Boolean!, name: String!): Account
  actionTraceByBlockIndexAndTransactionIdAndActionIndex(blockIndex: BigInt!, transactionId: String!, actionIndex: Int!): ActionTrace
  actionTraceAuthSequenceByBlockIndexAndTransactionIdAndActionIndexAndIndex(blockIndex: BigInt!, transactionId: String!, actionIndex: Int!, index: Int!): ActionTraceAuthSequence
  actionTraceAuthorizationByBlockIndexAndTransactionIdAndActionIndexAndIndex(blockIndex: BigInt!, transactionId: String!, actionIndex: Int!, index: Int!): ActionTraceAuthorization
  actionTraceRamDeltaByBlockIndexAndTransactionIdAndActionIndexAndIndex(blockIndex: BigInt!, transactionId: String!, actionIndex: Int!, index: Int!): ActionTraceRamDelta
  blockInfoByBlockIndex(blockIndex: BigInt!): BlockInfo
  contractIndex128ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI128Pkey(blockIndex: BigInt!, present: Boolean!, code: String!, scope: String!, table: String!, i128Pkey: BigFloat!): ContractIndex128
  contractIndex256ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI256Pkey(blockIndex: BigInt!, present: Boolean!, code: String!, scope: String!, table: String!, i256Pkey: BigFloat!): ContractIndex256
  contractIndex64ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI64Pkey(blockIndex: BigInt!, present: Boolean!, code: String!, scope: String!, table: String!, i64Pkey: BigFloat!): ContractIndex64
  contractIndexDoubleByBlockIndexAndPresentAndCodeAndScopeAndTableAndDoublePkey(blockIndex: BigInt!, present: Boolean!, code: String!, scope: String!, table: String!, doublePkey: BigFloat!): ContractIndexDouble
  contractIndexLongDoubleByBlockIndexAndPresentAndCodeAndScopeAndTableAndLongDoublePkey(blockIndex: BigInt!, present: Boolean!, code: String!, scope: String!, table: String!, longDoublePkey: BigFloat!): ContractIndexLongDouble
  contractRowByBlockIndexAndPresentAndCodeAndScopeAndTableAndCrowPkey(blockIndex: BigInt!, present: Boolean!, code: String!, scope: String!, table: String!, crowPkey: BigFloat!): ContractRow
  contractTableByBlockIndexAndPresentAndCodeAndScopeAndTable(blockIndex: BigInt!, present: Boolean!, code: String!, scope: String!, table: String!): ContractTable
  generatedTransactionByBlockIndexAndPresentAndSenderAndSenderId(blockIndex: BigInt!, present: Boolean!, sender: String!, senderId: BigFloat!): GeneratedTransaction
  globalPropertyByBlockIndexAndPresent(blockIndex: BigInt!, present: Boolean!): GlobalProperty
  permissionByBlockIndexAndPresentAndOwnerAndName(blockIndex: BigInt!, present: Boolean!, owner: String!, name: String!): Permission
  permissionLinkByBlockIndexAndPresentAndAccountAndCodeAndMessageType(blockIndex: BigInt!, present: Boolean!, account: String!, code: String!, messageType: String!): PermissionLink
  receivedBlockByBlockIndex(blockIndex: BigInt!): ReceivedBlock
  resourceLimitByBlockIndexAndPresentAndOwner(blockIndex: BigInt!, present: Boolean!, owner: String!): ResourceLimit
  resourceLimitsConfigByBlockIndexAndPresent(blockIndex: BigInt!, present: Boolean!): ResourceLimitsConfig
  resourceLimitsStateByBlockIndexAndPresent(blockIndex: BigInt!, present: Boolean!): ResourceLimitsState
  resourceUsageByBlockIndexAndPresentAndOwner(blockIndex: BigInt!, present: Boolean!, owner: String!): ResourceUsage
  transactionTraceByBlockIndexAndTransactionId(blockIndex: BigInt!, transactionId: String!): TransactionTrace

  """Reads a single `Account` using its globally unique `ID`."""
  account(
    """The globally unique `ID` to be used in selecting a single `Account`."""
    id: ID!
  ): Account

  """Reads a single `ActionTrace` using its globally unique `ID`."""
  actionTrace(
    """
    The globally unique `ID` to be used in selecting a single `ActionTrace`.
    """
    id: ID!
  ): ActionTrace

  """
  Reads a single `ActionTraceAuthSequence` using its globally unique `ID`.
  """
  actionTraceAuthSequence(
    """
    The globally unique `ID` to be used in selecting a single `ActionTraceAuthSequence`.
    """
    id: ID!
  ): ActionTraceAuthSequence

  """
  Reads a single `ActionTraceAuthorization` using its globally unique `ID`.
  """
  actionTraceAuthorization(
    """
    The globally unique `ID` to be used in selecting a single `ActionTraceAuthorization`.
    """
    id: ID!
  ): ActionTraceAuthorization

  """Reads a single `ActionTraceRamDelta` using its globally unique `ID`."""
  actionTraceRamDelta(
    """
    The globally unique `ID` to be used in selecting a single `ActionTraceRamDelta`.
    """
    id: ID!
  ): ActionTraceRamDelta

  """Reads a single `BlockInfo` using its globally unique `ID`."""
  blockInfo(
    """
    The globally unique `ID` to be used in selecting a single `BlockInfo`.
    """
    id: ID!
  ): BlockInfo

  """Reads a single `ContractIndex128` using its globally unique `ID`."""
  contractIndex128(
    """
    The globally unique `ID` to be used in selecting a single `ContractIndex128`.
    """
    id: ID!
  ): ContractIndex128

  """Reads a single `ContractIndex256` using its globally unique `ID`."""
  contractIndex256(
    """
    The globally unique `ID` to be used in selecting a single `ContractIndex256`.
    """
    id: ID!
  ): ContractIndex256

  """Reads a single `ContractIndex64` using its globally unique `ID`."""
  contractIndex64(
    """
    The globally unique `ID` to be used in selecting a single `ContractIndex64`.
    """
    id: ID!
  ): ContractIndex64

  """Reads a single `ContractIndexDouble` using its globally unique `ID`."""
  contractIndexDouble(
    """
    The globally unique `ID` to be used in selecting a single `ContractIndexDouble`.
    """
    id: ID!
  ): ContractIndexDouble

  """
  Reads a single `ContractIndexLongDouble` using its globally unique `ID`.
  """
  contractIndexLongDouble(
    """
    The globally unique `ID` to be used in selecting a single `ContractIndexLongDouble`.
    """
    id: ID!
  ): ContractIndexLongDouble

  """Reads a single `ContractRow` using its globally unique `ID`."""
  contractRow(
    """
    The globally unique `ID` to be used in selecting a single `ContractRow`.
    """
    id: ID!
  ): ContractRow

  """Reads a single `ContractTable` using its globally unique `ID`."""
  contractTable(
    """
    The globally unique `ID` to be used in selecting a single `ContractTable`.
    """
    id: ID!
  ): ContractTable

  """Reads a single `GeneratedTransaction` using its globally unique `ID`."""
  generatedTransaction(
    """
    The globally unique `ID` to be used in selecting a single `GeneratedTransaction`.
    """
    id: ID!
  ): GeneratedTransaction

  """Reads a single `GlobalProperty` using its globally unique `ID`."""
  globalProperty(
    """
    The globally unique `ID` to be used in selecting a single `GlobalProperty`.
    """
    id: ID!
  ): GlobalProperty

  """Reads a single `Permission` using its globally unique `ID`."""
  permission(
    """
    The globally unique `ID` to be used in selecting a single `Permission`.
    """
    id: ID!
  ): Permission

  """Reads a single `PermissionLink` using its globally unique `ID`."""
  permissionLink(
    """
    The globally unique `ID` to be used in selecting a single `PermissionLink`.
    """
    id: ID!
  ): PermissionLink

  """Reads a single `ReceivedBlock` using its globally unique `ID`."""
  receivedBlock(
    """
    The globally unique `ID` to be used in selecting a single `ReceivedBlock`.
    """
    id: ID!
  ): ReceivedBlock

  """Reads a single `ResourceLimit` using its globally unique `ID`."""
  resourceLimit(
    """
    The globally unique `ID` to be used in selecting a single `ResourceLimit`.
    """
    id: ID!
  ): ResourceLimit

  """Reads a single `ResourceLimitsConfig` using its globally unique `ID`."""
  resourceLimitsConfig(
    """
    The globally unique `ID` to be used in selecting a single `ResourceLimitsConfig`.
    """
    id: ID!
  ): ResourceLimitsConfig

  """Reads a single `ResourceLimitsState` using its globally unique `ID`."""
  resourceLimitsState(
    """
    The globally unique `ID` to be used in selecting a single `ResourceLimitsState`.
    """
    id: ID!
  ): ResourceLimitsState

  """Reads a single `ResourceUsage` using its globally unique `ID`."""
  resourceUsage(
    """
    The globally unique `ID` to be used in selecting a single `ResourceUsage`.
    """
    id: ID!
  ): ResourceUsage

  """Reads a single `TransactionTrace` using its globally unique `ID`."""
  transactionTrace(
    """
    The globally unique `ID` to be used in selecting a single `TransactionTrace`.
    """
    id: ID!
  ): TransactionTrace
}

type ReceivedBlock implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockIndex: BigInt!
  blockId: String
}

"""
A condition to be used against `ReceivedBlock` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ReceivedBlockCondition {
  """Checks for equality with the object’s `blockIndex` field."""
  blockIndex: BigInt

  """Checks for equality with the object’s `blockId` field."""
  blockId: String
}

"""An input for mutations affecting `ReceivedBlock`"""
input ReceivedBlockInput {
  blockIndex: BigInt!
  blockId: String
}

"""
Represents an update to a `ReceivedBlock`. Fields that are set will be updated.
"""
input ReceivedBlockPatch {
  blockIndex: BigInt
  blockId: String
}

"""A connection to a list of `ReceivedBlock` values."""
type ReceivedBlocksConnection {
  """A list of `ReceivedBlock` objects."""
  nodes: [ReceivedBlock]!

  """
  A list of edges which contains the `ReceivedBlock` and cursor to aid in pagination.
  """
  edges: [ReceivedBlocksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReceivedBlock` you could get from the connection."""
  totalCount: Int
}

"""A `ReceivedBlock` edge in the connection."""
type ReceivedBlocksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReceivedBlock` at the end of the edge."""
  node: ReceivedBlock
}

"""Methods to use when ordering `ReceivedBlock`."""
enum ReceivedBlocksOrderBy {
  NATURAL
  BLOCK_INDEX_ASC
  BLOCK_INDEX_DESC
  BLOCK_ID_ASC
  BLOCK_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ResourceLimit implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockIndex: BigInt!
  present: Boolean!
  owner: String!
  netWeight: BigInt
  cpuWeight: BigInt
  ramBytes: BigInt
}

"""
A condition to be used against `ResourceLimit` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ResourceLimitCondition {
  """Checks for equality with the object’s `blockIndex` field."""
  blockIndex: BigInt

  """Checks for equality with the object’s `present` field."""
  present: Boolean

  """Checks for equality with the object’s `owner` field."""
  owner: String

  """Checks for equality with the object’s `netWeight` field."""
  netWeight: BigInt

  """Checks for equality with the object’s `cpuWeight` field."""
  cpuWeight: BigInt

  """Checks for equality with the object’s `ramBytes` field."""
  ramBytes: BigInt
}

"""An input for mutations affecting `ResourceLimit`"""
input ResourceLimitInput {
  blockIndex: BigInt!
  present: Boolean!
  owner: String!
  netWeight: BigInt
  cpuWeight: BigInt
  ramBytes: BigInt
}

"""
Represents an update to a `ResourceLimit`. Fields that are set will be updated.
"""
input ResourceLimitPatch {
  blockIndex: BigInt
  present: Boolean
  owner: String
  netWeight: BigInt
  cpuWeight: BigInt
  ramBytes: BigInt
}

type ResourceLimitsConfig implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockIndex: BigInt!
  present: Boolean!
  cpuLimitParametersTarget: BigFloat
  cpuLimitParametersMax: BigFloat
  cpuLimitParametersPeriods: BigInt
  cpuLimitParametersMaxMultiplier: BigInt
  cpuLimitParametersContractRateNumerator: BigFloat
  cpuLimitParametersContractRateDenominator: BigFloat
  cpuLimitParametersExpandRateNumerator: BigFloat
  cpuLimitParametersExpandRateDenominator: BigFloat
  netLimitParametersTarget: BigFloat
  netLimitParametersMax: BigFloat
  netLimitParametersPeriods: BigInt
  netLimitParametersMaxMultiplier: BigInt
  netLimitParametersContractRateNumerator: BigFloat
  netLimitParametersContractRateDenominator: BigFloat
  netLimitParametersExpandRateNumerator: BigFloat
  netLimitParametersExpandRateDenominator: BigFloat
  accountCpuUsageAverageWindow: BigInt
  accountNetUsageAverageWindow: BigInt
}

"""
A condition to be used against `ResourceLimitsConfig` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ResourceLimitsConfigCondition {
  """Checks for equality with the object’s `blockIndex` field."""
  blockIndex: BigInt

  """Checks for equality with the object’s `present` field."""
  present: Boolean

  """
  Checks for equality with the object’s `cpuLimitParametersTarget` field.
  """
  cpuLimitParametersTarget: BigFloat

  """Checks for equality with the object’s `cpuLimitParametersMax` field."""
  cpuLimitParametersMax: BigFloat

  """
  Checks for equality with the object’s `cpuLimitParametersPeriods` field.
  """
  cpuLimitParametersPeriods: BigInt

  """
  Checks for equality with the object’s `cpuLimitParametersMaxMultiplier` field.
  """
  cpuLimitParametersMaxMultiplier: BigInt

  """
  Checks for equality with the object’s `cpuLimitParametersContractRateNumerator` field.
  """
  cpuLimitParametersContractRateNumerator: BigFloat

  """
  Checks for equality with the object’s `cpuLimitParametersContractRateDenominator` field.
  """
  cpuLimitParametersContractRateDenominator: BigFloat

  """
  Checks for equality with the object’s `cpuLimitParametersExpandRateNumerator` field.
  """
  cpuLimitParametersExpandRateNumerator: BigFloat

  """
  Checks for equality with the object’s `cpuLimitParametersExpandRateDenominator` field.
  """
  cpuLimitParametersExpandRateDenominator: BigFloat

  """
  Checks for equality with the object’s `netLimitParametersTarget` field.
  """
  netLimitParametersTarget: BigFloat

  """Checks for equality with the object’s `netLimitParametersMax` field."""
  netLimitParametersMax: BigFloat

  """
  Checks for equality with the object’s `netLimitParametersPeriods` field.
  """
  netLimitParametersPeriods: BigInt

  """
  Checks for equality with the object’s `netLimitParametersMaxMultiplier` field.
  """
  netLimitParametersMaxMultiplier: BigInt

  """
  Checks for equality with the object’s `netLimitParametersContractRateNumerator` field.
  """
  netLimitParametersContractRateNumerator: BigFloat

  """
  Checks for equality with the object’s `netLimitParametersContractRateDenominator` field.
  """
  netLimitParametersContractRateDenominator: BigFloat

  """
  Checks for equality with the object’s `netLimitParametersExpandRateNumerator` field.
  """
  netLimitParametersExpandRateNumerator: BigFloat

  """
  Checks for equality with the object’s `netLimitParametersExpandRateDenominator` field.
  """
  netLimitParametersExpandRateDenominator: BigFloat

  """
  Checks for equality with the object’s `accountCpuUsageAverageWindow` field.
  """
  accountCpuUsageAverageWindow: BigInt

  """
  Checks for equality with the object’s `accountNetUsageAverageWindow` field.
  """
  accountNetUsageAverageWindow: BigInt
}

"""An input for mutations affecting `ResourceLimitsConfig`"""
input ResourceLimitsConfigInput {
  blockIndex: BigInt!
  present: Boolean!
  cpuLimitParametersTarget: BigFloat
  cpuLimitParametersMax: BigFloat
  cpuLimitParametersPeriods: BigInt
  cpuLimitParametersMaxMultiplier: BigInt
  cpuLimitParametersContractRateNumerator: BigFloat
  cpuLimitParametersContractRateDenominator: BigFloat
  cpuLimitParametersExpandRateNumerator: BigFloat
  cpuLimitParametersExpandRateDenominator: BigFloat
  netLimitParametersTarget: BigFloat
  netLimitParametersMax: BigFloat
  netLimitParametersPeriods: BigInt
  netLimitParametersMaxMultiplier: BigInt
  netLimitParametersContractRateNumerator: BigFloat
  netLimitParametersContractRateDenominator: BigFloat
  netLimitParametersExpandRateNumerator: BigFloat
  netLimitParametersExpandRateDenominator: BigFloat
  accountCpuUsageAverageWindow: BigInt
  accountNetUsageAverageWindow: BigInt
}

"""
Represents an update to a `ResourceLimitsConfig`. Fields that are set will be updated.
"""
input ResourceLimitsConfigPatch {
  blockIndex: BigInt
  present: Boolean
  cpuLimitParametersTarget: BigFloat
  cpuLimitParametersMax: BigFloat
  cpuLimitParametersPeriods: BigInt
  cpuLimitParametersMaxMultiplier: BigInt
  cpuLimitParametersContractRateNumerator: BigFloat
  cpuLimitParametersContractRateDenominator: BigFloat
  cpuLimitParametersExpandRateNumerator: BigFloat
  cpuLimitParametersExpandRateDenominator: BigFloat
  netLimitParametersTarget: BigFloat
  netLimitParametersMax: BigFloat
  netLimitParametersPeriods: BigInt
  netLimitParametersMaxMultiplier: BigInt
  netLimitParametersContractRateNumerator: BigFloat
  netLimitParametersContractRateDenominator: BigFloat
  netLimitParametersExpandRateNumerator: BigFloat
  netLimitParametersExpandRateDenominator: BigFloat
  accountCpuUsageAverageWindow: BigInt
  accountNetUsageAverageWindow: BigInt
}

"""A connection to a list of `ResourceLimitsConfig` values."""
type ResourceLimitsConfigsConnection {
  """A list of `ResourceLimitsConfig` objects."""
  nodes: [ResourceLimitsConfig]!

  """
  A list of edges which contains the `ResourceLimitsConfig` and cursor to aid in pagination.
  """
  edges: [ResourceLimitsConfigsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ResourceLimitsConfig` you could get from the connection.
  """
  totalCount: Int
}

"""A `ResourceLimitsConfig` edge in the connection."""
type ResourceLimitsConfigsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ResourceLimitsConfig` at the end of the edge."""
  node: ResourceLimitsConfig
}

"""Methods to use when ordering `ResourceLimitsConfig`."""
enum ResourceLimitsConfigsOrderBy {
  NATURAL
  BLOCK_INDEX_ASC
  BLOCK_INDEX_DESC
  PRESENT_ASC
  PRESENT_DESC
  CPU_LIMIT_PARAMETERS_TARGET_ASC
  CPU_LIMIT_PARAMETERS_TARGET_DESC
  CPU_LIMIT_PARAMETERS_MAX_ASC
  CPU_LIMIT_PARAMETERS_MAX_DESC
  CPU_LIMIT_PARAMETERS_PERIODS_ASC
  CPU_LIMIT_PARAMETERS_PERIODS_DESC
  CPU_LIMIT_PARAMETERS_MAX_MULTIPLIER_ASC
  CPU_LIMIT_PARAMETERS_MAX_MULTIPLIER_DESC
  CPU_LIMIT_PARAMETERS_CONTRACT_RATE_NUMERATOR_ASC
  CPU_LIMIT_PARAMETERS_CONTRACT_RATE_NUMERATOR_DESC
  CPU_LIMIT_PARAMETERS_CONTRACT_RATE_DENOMINATOR_ASC
  CPU_LIMIT_PARAMETERS_CONTRACT_RATE_DENOMINATOR_DESC
  CPU_LIMIT_PARAMETERS_EXPAND_RATE_NUMERATOR_ASC
  CPU_LIMIT_PARAMETERS_EXPAND_RATE_NUMERATOR_DESC
  CPU_LIMIT_PARAMETERS_EXPAND_RATE_DENOMINATOR_ASC
  CPU_LIMIT_PARAMETERS_EXPAND_RATE_DENOMINATOR_DESC
  NET_LIMIT_PARAMETERS_TARGET_ASC
  NET_LIMIT_PARAMETERS_TARGET_DESC
  NET_LIMIT_PARAMETERS_MAX_ASC
  NET_LIMIT_PARAMETERS_MAX_DESC
  NET_LIMIT_PARAMETERS_PERIODS_ASC
  NET_LIMIT_PARAMETERS_PERIODS_DESC
  NET_LIMIT_PARAMETERS_MAX_MULTIPLIER_ASC
  NET_LIMIT_PARAMETERS_MAX_MULTIPLIER_DESC
  NET_LIMIT_PARAMETERS_CONTRACT_RATE_NUMERATOR_ASC
  NET_LIMIT_PARAMETERS_CONTRACT_RATE_NUMERATOR_DESC
  NET_LIMIT_PARAMETERS_CONTRACT_RATE_DENOMINATOR_ASC
  NET_LIMIT_PARAMETERS_CONTRACT_RATE_DENOMINATOR_DESC
  NET_LIMIT_PARAMETERS_EXPAND_RATE_NUMERATOR_ASC
  NET_LIMIT_PARAMETERS_EXPAND_RATE_NUMERATOR_DESC
  NET_LIMIT_PARAMETERS_EXPAND_RATE_DENOMINATOR_ASC
  NET_LIMIT_PARAMETERS_EXPAND_RATE_DENOMINATOR_DESC
  ACCOUNT_CPU_USAGE_AVERAGE_WINDOW_ASC
  ACCOUNT_CPU_USAGE_AVERAGE_WINDOW_DESC
  ACCOUNT_NET_USAGE_AVERAGE_WINDOW_ASC
  ACCOUNT_NET_USAGE_AVERAGE_WINDOW_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `ResourceLimit` values."""
type ResourceLimitsConnection {
  """A list of `ResourceLimit` objects."""
  nodes: [ResourceLimit]!

  """
  A list of edges which contains the `ResourceLimit` and cursor to aid in pagination.
  """
  edges: [ResourceLimitsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ResourceLimit` you could get from the connection."""
  totalCount: Int
}

"""A `ResourceLimit` edge in the connection."""
type ResourceLimitsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ResourceLimit` at the end of the edge."""
  node: ResourceLimit
}

"""Methods to use when ordering `ResourceLimit`."""
enum ResourceLimitsOrderBy {
  NATURAL
  BLOCK_INDEX_ASC
  BLOCK_INDEX_DESC
  PRESENT_ASC
  PRESENT_DESC
  OWNER_ASC
  OWNER_DESC
  NET_WEIGHT_ASC
  NET_WEIGHT_DESC
  CPU_WEIGHT_ASC
  CPU_WEIGHT_DESC
  RAM_BYTES_ASC
  RAM_BYTES_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ResourceLimitsState implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockIndex: BigInt!
  present: Boolean!
  averageBlockNetUsageLastOrdinal: BigInt
  averageBlockNetUsageValueEx: BigFloat
  averageBlockNetUsageConsumed: BigFloat
  averageBlockCpuUsageLastOrdinal: BigInt
  averageBlockCpuUsageValueEx: BigFloat
  averageBlockCpuUsageConsumed: BigFloat
  totalNetWeight: BigFloat
  totalCpuWeight: BigFloat
  totalRamBytes: BigFloat
  virtualNetLimit: BigFloat
  virtualCpuLimit: BigFloat
}

"""
A condition to be used against `ResourceLimitsState` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ResourceLimitsStateCondition {
  """Checks for equality with the object’s `blockIndex` field."""
  blockIndex: BigInt

  """Checks for equality with the object’s `present` field."""
  present: Boolean

  """
  Checks for equality with the object’s `averageBlockNetUsageLastOrdinal` field.
  """
  averageBlockNetUsageLastOrdinal: BigInt

  """
  Checks for equality with the object’s `averageBlockNetUsageValueEx` field.
  """
  averageBlockNetUsageValueEx: BigFloat

  """
  Checks for equality with the object’s `averageBlockNetUsageConsumed` field.
  """
  averageBlockNetUsageConsumed: BigFloat

  """
  Checks for equality with the object’s `averageBlockCpuUsageLastOrdinal` field.
  """
  averageBlockCpuUsageLastOrdinal: BigInt

  """
  Checks for equality with the object’s `averageBlockCpuUsageValueEx` field.
  """
  averageBlockCpuUsageValueEx: BigFloat

  """
  Checks for equality with the object’s `averageBlockCpuUsageConsumed` field.
  """
  averageBlockCpuUsageConsumed: BigFloat

  """Checks for equality with the object’s `totalNetWeight` field."""
  totalNetWeight: BigFloat

  """Checks for equality with the object’s `totalCpuWeight` field."""
  totalCpuWeight: BigFloat

  """Checks for equality with the object’s `totalRamBytes` field."""
  totalRamBytes: BigFloat

  """Checks for equality with the object’s `virtualNetLimit` field."""
  virtualNetLimit: BigFloat

  """Checks for equality with the object’s `virtualCpuLimit` field."""
  virtualCpuLimit: BigFloat
}

"""An input for mutations affecting `ResourceLimitsState`"""
input ResourceLimitsStateInput {
  blockIndex: BigInt!
  present: Boolean!
  averageBlockNetUsageLastOrdinal: BigInt
  averageBlockNetUsageValueEx: BigFloat
  averageBlockNetUsageConsumed: BigFloat
  averageBlockCpuUsageLastOrdinal: BigInt
  averageBlockCpuUsageValueEx: BigFloat
  averageBlockCpuUsageConsumed: BigFloat
  totalNetWeight: BigFloat
  totalCpuWeight: BigFloat
  totalRamBytes: BigFloat
  virtualNetLimit: BigFloat
  virtualCpuLimit: BigFloat
}

"""
Represents an update to a `ResourceLimitsState`. Fields that are set will be updated.
"""
input ResourceLimitsStatePatch {
  blockIndex: BigInt
  present: Boolean
  averageBlockNetUsageLastOrdinal: BigInt
  averageBlockNetUsageValueEx: BigFloat
  averageBlockNetUsageConsumed: BigFloat
  averageBlockCpuUsageLastOrdinal: BigInt
  averageBlockCpuUsageValueEx: BigFloat
  averageBlockCpuUsageConsumed: BigFloat
  totalNetWeight: BigFloat
  totalCpuWeight: BigFloat
  totalRamBytes: BigFloat
  virtualNetLimit: BigFloat
  virtualCpuLimit: BigFloat
}

"""A connection to a list of `ResourceLimitsState` values."""
type ResourceLimitsStatesConnection {
  """A list of `ResourceLimitsState` objects."""
  nodes: [ResourceLimitsState]!

  """
  A list of edges which contains the `ResourceLimitsState` and cursor to aid in pagination.
  """
  edges: [ResourceLimitsStatesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ResourceLimitsState` you could get from the connection.
  """
  totalCount: Int
}

"""A `ResourceLimitsState` edge in the connection."""
type ResourceLimitsStatesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ResourceLimitsState` at the end of the edge."""
  node: ResourceLimitsState
}

"""Methods to use when ordering `ResourceLimitsState`."""
enum ResourceLimitsStatesOrderBy {
  NATURAL
  BLOCK_INDEX_ASC
  BLOCK_INDEX_DESC
  PRESENT_ASC
  PRESENT_DESC
  AVERAGE_BLOCK_NET_USAGE_LAST_ORDINAL_ASC
  AVERAGE_BLOCK_NET_USAGE_LAST_ORDINAL_DESC
  AVERAGE_BLOCK_NET_USAGE_VALUE_EX_ASC
  AVERAGE_BLOCK_NET_USAGE_VALUE_EX_DESC
  AVERAGE_BLOCK_NET_USAGE_CONSUMED_ASC
  AVERAGE_BLOCK_NET_USAGE_CONSUMED_DESC
  AVERAGE_BLOCK_CPU_USAGE_LAST_ORDINAL_ASC
  AVERAGE_BLOCK_CPU_USAGE_LAST_ORDINAL_DESC
  AVERAGE_BLOCK_CPU_USAGE_VALUE_EX_ASC
  AVERAGE_BLOCK_CPU_USAGE_VALUE_EX_DESC
  AVERAGE_BLOCK_CPU_USAGE_CONSUMED_ASC
  AVERAGE_BLOCK_CPU_USAGE_CONSUMED_DESC
  TOTAL_NET_WEIGHT_ASC
  TOTAL_NET_WEIGHT_DESC
  TOTAL_CPU_WEIGHT_ASC
  TOTAL_CPU_WEIGHT_DESC
  TOTAL_RAM_BYTES_ASC
  TOTAL_RAM_BYTES_DESC
  VIRTUAL_NET_LIMIT_ASC
  VIRTUAL_NET_LIMIT_DESC
  VIRTUAL_CPU_LIMIT_ASC
  VIRTUAL_CPU_LIMIT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ResourceUsage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockIndex: BigInt!
  present: Boolean!
  owner: String!
  netUsageLastOrdinal: BigInt
  netUsageValueEx: BigFloat
  netUsageConsumed: BigFloat
  cpuUsageLastOrdinal: BigInt
  cpuUsageValueEx: BigFloat
  cpuUsageConsumed: BigFloat
  ramUsage: BigFloat
}

"""
A condition to be used against `ResourceUsage` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ResourceUsageCondition {
  """Checks for equality with the object’s `blockIndex` field."""
  blockIndex: BigInt

  """Checks for equality with the object’s `present` field."""
  present: Boolean

  """Checks for equality with the object’s `owner` field."""
  owner: String

  """Checks for equality with the object’s `netUsageLastOrdinal` field."""
  netUsageLastOrdinal: BigInt

  """Checks for equality with the object’s `netUsageValueEx` field."""
  netUsageValueEx: BigFloat

  """Checks for equality with the object’s `netUsageConsumed` field."""
  netUsageConsumed: BigFloat

  """Checks for equality with the object’s `cpuUsageLastOrdinal` field."""
  cpuUsageLastOrdinal: BigInt

  """Checks for equality with the object’s `cpuUsageValueEx` field."""
  cpuUsageValueEx: BigFloat

  """Checks for equality with the object’s `cpuUsageConsumed` field."""
  cpuUsageConsumed: BigFloat

  """Checks for equality with the object’s `ramUsage` field."""
  ramUsage: BigFloat
}

"""An input for mutations affecting `ResourceUsage`"""
input ResourceUsageInput {
  blockIndex: BigInt!
  present: Boolean!
  owner: String!
  netUsageLastOrdinal: BigInt
  netUsageValueEx: BigFloat
  netUsageConsumed: BigFloat
  cpuUsageLastOrdinal: BigInt
  cpuUsageValueEx: BigFloat
  cpuUsageConsumed: BigFloat
  ramUsage: BigFloat
}

"""
Represents an update to a `ResourceUsage`. Fields that are set will be updated.
"""
input ResourceUsagePatch {
  blockIndex: BigInt
  present: Boolean
  owner: String
  netUsageLastOrdinal: BigInt
  netUsageValueEx: BigFloat
  netUsageConsumed: BigFloat
  cpuUsageLastOrdinal: BigInt
  cpuUsageValueEx: BigFloat
  cpuUsageConsumed: BigFloat
  ramUsage: BigFloat
}

"""A connection to a list of `ResourceUsage` values."""
type ResourceUsagesConnection {
  """A list of `ResourceUsage` objects."""
  nodes: [ResourceUsage]!

  """
  A list of edges which contains the `ResourceUsage` and cursor to aid in pagination.
  """
  edges: [ResourceUsagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ResourceUsage` you could get from the connection."""
  totalCount: Int
}

"""A `ResourceUsage` edge in the connection."""
type ResourceUsagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ResourceUsage` at the end of the edge."""
  node: ResourceUsage
}

"""Methods to use when ordering `ResourceUsage`."""
enum ResourceUsagesOrderBy {
  NATURAL
  BLOCK_INDEX_ASC
  BLOCK_INDEX_DESC
  PRESENT_ASC
  PRESENT_DESC
  OWNER_ASC
  OWNER_DESC
  NET_USAGE_LAST_ORDINAL_ASC
  NET_USAGE_LAST_ORDINAL_DESC
  NET_USAGE_VALUE_EX_ASC
  NET_USAGE_VALUE_EX_DESC
  NET_USAGE_CONSUMED_ASC
  NET_USAGE_CONSUMED_DESC
  CPU_USAGE_LAST_ORDINAL_ASC
  CPU_USAGE_LAST_ORDINAL_DESC
  CPU_USAGE_VALUE_EX_ASC
  CPU_USAGE_VALUE_EX_DESC
  CPU_USAGE_CONSUMED_ASC
  CPU_USAGE_CONSUMED_DESC
  RAM_USAGE_ASC
  RAM_USAGE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum TransactionStatusType {
  EXECUTED
  SOFT_FAIL
  HARD_FAIL
  DELAYED
  EXPIRED
}

type TransactionTrace implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockIndex: BigInt!
  failedDtrxTrace: String
  transactionId: String!
  status: TransactionStatusType
  cpuUsageUs: BigInt
  netUsageWords: BigInt
  elapsed: BigInt
  netUsage: BigFloat
  scheduled: Boolean
  except: String
}

"""
A condition to be used against `TransactionTrace` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TransactionTraceCondition {
  """Checks for equality with the object’s `blockIndex` field."""
  blockIndex: BigInt

  """Checks for equality with the object’s `failedDtrxTrace` field."""
  failedDtrxTrace: String

  """Checks for equality with the object’s `transactionId` field."""
  transactionId: String

  """Checks for equality with the object’s `status` field."""
  status: TransactionStatusType

  """Checks for equality with the object’s `cpuUsageUs` field."""
  cpuUsageUs: BigInt

  """Checks for equality with the object’s `netUsageWords` field."""
  netUsageWords: BigInt

  """Checks for equality with the object’s `elapsed` field."""
  elapsed: BigInt

  """Checks for equality with the object’s `netUsage` field."""
  netUsage: BigFloat

  """Checks for equality with the object’s `scheduled` field."""
  scheduled: Boolean

  """Checks for equality with the object’s `except` field."""
  except: String
}

"""An input for mutations affecting `TransactionTrace`"""
input TransactionTraceInput {
  blockIndex: BigInt!
  failedDtrxTrace: String
  transactionId: String!
  status: TransactionStatusType
  cpuUsageUs: BigInt
  netUsageWords: BigInt
  elapsed: BigInt
  netUsage: BigFloat
  scheduled: Boolean
  except: String
}

"""
Represents an update to a `TransactionTrace`. Fields that are set will be updated.
"""
input TransactionTracePatch {
  blockIndex: BigInt
  failedDtrxTrace: String
  transactionId: String
  status: TransactionStatusType
  cpuUsageUs: BigInt
  netUsageWords: BigInt
  elapsed: BigInt
  netUsage: BigFloat
  scheduled: Boolean
  except: String
}

"""A connection to a list of `TransactionTrace` values."""
type TransactionTracesConnection {
  """A list of `TransactionTrace` objects."""
  nodes: [TransactionTrace]!

  """
  A list of edges which contains the `TransactionTrace` and cursor to aid in pagination.
  """
  edges: [TransactionTracesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TransactionTrace` you could get from the connection.
  """
  totalCount: Int
}

"""A `TransactionTrace` edge in the connection."""
type TransactionTracesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TransactionTrace` at the end of the edge."""
  node: TransactionTrace
}

"""Methods to use when ordering `TransactionTrace`."""
enum TransactionTracesOrderBy {
  NATURAL
  BLOCK_INDEX_ASC
  BLOCK_INDEX_DESC
  FAILED_DTRX_TRACE_ASC
  FAILED_DTRX_TRACE_DESC
  TRANSACTION_ID_ASC
  TRANSACTION_ID_DESC
  STATUS_ASC
  STATUS_DESC
  CPU_USAGE_US_ASC
  CPU_USAGE_US_DESC
  NET_USAGE_WORDS_ASC
  NET_USAGE_WORDS_DESC
  ELAPSED_ASC
  ELAPSED_DESC
  NET_USAGE_ASC
  NET_USAGE_DESC
  SCHEDULED_ASC
  SCHEDULED_DESC
  EXCEPT_ASC
  EXCEPT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
All input for the `updateAccountByBlockIndexAndPresentAndName` mutation.
"""
input UpdateAccountByBlockIndexAndPresentAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Account` being updated.
  """
  accountPatch: AccountPatch!
  blockIndex: BigInt!
  present: Boolean!
  name: String!
}

"""All input for the `updateAccount` mutation."""
input UpdateAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Account` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Account` being updated.
  """
  accountPatch: AccountPatch!
}

"""The output of our update `Account` mutation."""
type UpdateAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Account` that was updated by this mutation."""
  account: Account

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Account`. May be used by Relay 1."""
  accountEdge(
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = PRIMARY_KEY_ASC
  ): AccountsEdge
}

"""
All input for the `updateActionTraceAuthorizationByBlockIndexAndTransactionIdAndActionIndexAndIndex` mutation.
"""
input UpdateActionTraceAuthorizationByBlockIndexAndTransactionIdAndActionIndexAndIndexInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ActionTraceAuthorization` being updated.
  """
  actionTraceAuthorizationPatch: ActionTraceAuthorizationPatch!
  blockIndex: BigInt!
  transactionId: String!
  actionIndex: Int!
  index: Int!
}

"""All input for the `updateActionTraceAuthorization` mutation."""
input UpdateActionTraceAuthorizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ActionTraceAuthorization` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ActionTraceAuthorization` being updated.
  """
  actionTraceAuthorizationPatch: ActionTraceAuthorizationPatch!
}

"""The output of our update `ActionTraceAuthorization` mutation."""
type UpdateActionTraceAuthorizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ActionTraceAuthorization` that was updated by this mutation."""
  actionTraceAuthorization: ActionTraceAuthorization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ActionTraceAuthorization`. May be used by Relay 1."""
  actionTraceAuthorizationEdge(
    """The method to use when ordering `ActionTraceAuthorization`."""
    orderBy: [ActionTraceAuthorizationsOrderBy!] = PRIMARY_KEY_ASC
  ): ActionTraceAuthorizationsEdge
}

"""
All input for the `updateActionTraceAuthSequenceByBlockIndexAndTransactionIdAndActionIndexAndIndex` mutation.
"""
input UpdateActionTraceAuthSequenceByBlockIndexAndTransactionIdAndActionIndexAndIndexInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ActionTraceAuthSequence` being updated.
  """
  actionTraceAuthSequencePatch: ActionTraceAuthSequencePatch!
  blockIndex: BigInt!
  transactionId: String!
  actionIndex: Int!
  index: Int!
}

"""All input for the `updateActionTraceAuthSequence` mutation."""
input UpdateActionTraceAuthSequenceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ActionTraceAuthSequence` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ActionTraceAuthSequence` being updated.
  """
  actionTraceAuthSequencePatch: ActionTraceAuthSequencePatch!
}

"""The output of our update `ActionTraceAuthSequence` mutation."""
type UpdateActionTraceAuthSequencePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ActionTraceAuthSequence` that was updated by this mutation."""
  actionTraceAuthSequence: ActionTraceAuthSequence

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ActionTraceAuthSequence`. May be used by Relay 1."""
  actionTraceAuthSequenceEdge(
    """The method to use when ordering `ActionTraceAuthSequence`."""
    orderBy: [ActionTraceAuthSequencesOrderBy!] = PRIMARY_KEY_ASC
  ): ActionTraceAuthSequencesEdge
}

"""
All input for the `updateActionTraceByBlockIndexAndTransactionIdAndActionIndex` mutation.
"""
input UpdateActionTraceByBlockIndexAndTransactionIdAndActionIndexInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ActionTrace` being updated.
  """
  actionTracePatch: ActionTracePatch!
  blockIndex: BigInt!
  transactionId: String!
  actionIndex: Int!
}

"""All input for the `updateActionTrace` mutation."""
input UpdateActionTraceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ActionTrace` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ActionTrace` being updated.
  """
  actionTracePatch: ActionTracePatch!
}

"""The output of our update `ActionTrace` mutation."""
type UpdateActionTracePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ActionTrace` that was updated by this mutation."""
  actionTrace: ActionTrace

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ActionTrace`. May be used by Relay 1."""
  actionTraceEdge(
    """The method to use when ordering `ActionTrace`."""
    orderBy: [ActionTracesOrderBy!] = PRIMARY_KEY_ASC
  ): ActionTracesEdge
}

"""
All input for the `updateActionTraceRamDeltaByBlockIndexAndTransactionIdAndActionIndexAndIndex` mutation.
"""
input UpdateActionTraceRamDeltaByBlockIndexAndTransactionIdAndActionIndexAndIndexInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ActionTraceRamDelta` being updated.
  """
  actionTraceRamDeltaPatch: ActionTraceRamDeltaPatch!
  blockIndex: BigInt!
  transactionId: String!
  actionIndex: Int!
  index: Int!
}

"""All input for the `updateActionTraceRamDelta` mutation."""
input UpdateActionTraceRamDeltaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ActionTraceRamDelta` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ActionTraceRamDelta` being updated.
  """
  actionTraceRamDeltaPatch: ActionTraceRamDeltaPatch!
}

"""The output of our update `ActionTraceRamDelta` mutation."""
type UpdateActionTraceRamDeltaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ActionTraceRamDelta` that was updated by this mutation."""
  actionTraceRamDelta: ActionTraceRamDelta

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ActionTraceRamDelta`. May be used by Relay 1."""
  actionTraceRamDeltaEdge(
    """The method to use when ordering `ActionTraceRamDelta`."""
    orderBy: [ActionTraceRamDeltasOrderBy!] = PRIMARY_KEY_ASC
  ): ActionTraceRamDeltasEdge
}

"""All input for the `updateBlockInfoByBlockIndex` mutation."""
input UpdateBlockInfoByBlockIndexInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `BlockInfo` being updated.
  """
  blockInfoPatch: BlockInfoPatch!
  blockIndex: BigInt!
}

"""All input for the `updateBlockInfo` mutation."""
input UpdateBlockInfoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BlockInfo` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `BlockInfo` being updated.
  """
  blockInfoPatch: BlockInfoPatch!
}

"""The output of our update `BlockInfo` mutation."""
type UpdateBlockInfoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BlockInfo` that was updated by this mutation."""
  blockInfo: BlockInfo

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `BlockInfo`. May be used by Relay 1."""
  blockInfoEdge(
    """The method to use when ordering `BlockInfo`."""
    orderBy: [BlockInfosOrderBy!] = PRIMARY_KEY_ASC
  ): BlockInfosEdge
}

"""
All input for the `updateContractIndex128ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI128Pkey` mutation.
"""
input UpdateContractIndex128ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI128PkeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ContractIndex128` being updated.
  """
  contractIndex128Patch: ContractIndex128Patch!
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  i128Pkey: BigFloat!
}

"""All input for the `updateContractIndex128` mutation."""
input UpdateContractIndex128Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ContractIndex128` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ContractIndex128` being updated.
  """
  contractIndex128Patch: ContractIndex128Patch!
}

"""The output of our update `ContractIndex128` mutation."""
type UpdateContractIndex128Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContractIndex128` that was updated by this mutation."""
  contractIndex128: ContractIndex128

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContractIndex128`. May be used by Relay 1."""
  contractIndex128Edge(
    """The method to use when ordering `ContractIndex128`."""
    orderBy: [ContractIndex128SOrderBy!] = PRIMARY_KEY_ASC
  ): ContractIndex128SEdge
}

"""
All input for the `updateContractIndex256ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI256Pkey` mutation.
"""
input UpdateContractIndex256ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI256PkeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ContractIndex256` being updated.
  """
  contractIndex256Patch: ContractIndex256Patch!
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  i256Pkey: BigFloat!
}

"""All input for the `updateContractIndex256` mutation."""
input UpdateContractIndex256Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ContractIndex256` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ContractIndex256` being updated.
  """
  contractIndex256Patch: ContractIndex256Patch!
}

"""The output of our update `ContractIndex256` mutation."""
type UpdateContractIndex256Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContractIndex256` that was updated by this mutation."""
  contractIndex256: ContractIndex256

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContractIndex256`. May be used by Relay 1."""
  contractIndex256Edge(
    """The method to use when ordering `ContractIndex256`."""
    orderBy: [ContractIndex256SOrderBy!] = PRIMARY_KEY_ASC
  ): ContractIndex256SEdge
}

"""
All input for the `updateContractIndex64ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI64Pkey` mutation.
"""
input UpdateContractIndex64ByBlockIndexAndPresentAndCodeAndScopeAndTableAndI64PkeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ContractIndex64` being updated.
  """
  contractIndex64Patch: ContractIndex64Patch!
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  i64Pkey: BigFloat!
}

"""All input for the `updateContractIndex64` mutation."""
input UpdateContractIndex64Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ContractIndex64` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ContractIndex64` being updated.
  """
  contractIndex64Patch: ContractIndex64Patch!
}

"""The output of our update `ContractIndex64` mutation."""
type UpdateContractIndex64Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContractIndex64` that was updated by this mutation."""
  contractIndex64: ContractIndex64

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContractIndex64`. May be used by Relay 1."""
  contractIndex64Edge(
    """The method to use when ordering `ContractIndex64`."""
    orderBy: [ContractIndex64SOrderBy!] = PRIMARY_KEY_ASC
  ): ContractIndex64SEdge
}

"""
All input for the `updateContractIndexDoubleByBlockIndexAndPresentAndCodeAndScopeAndTableAndDoublePkey` mutation.
"""
input UpdateContractIndexDoubleByBlockIndexAndPresentAndCodeAndScopeAndTableAndDoublePkeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ContractIndexDouble` being updated.
  """
  contractIndexDoublePatch: ContractIndexDoublePatch!
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  doublePkey: BigFloat!
}

"""All input for the `updateContractIndexDouble` mutation."""
input UpdateContractIndexDoubleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ContractIndexDouble` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ContractIndexDouble` being updated.
  """
  contractIndexDoublePatch: ContractIndexDoublePatch!
}

"""The output of our update `ContractIndexDouble` mutation."""
type UpdateContractIndexDoublePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContractIndexDouble` that was updated by this mutation."""
  contractIndexDouble: ContractIndexDouble

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContractIndexDouble`. May be used by Relay 1."""
  contractIndexDoubleEdge(
    """The method to use when ordering `ContractIndexDouble`."""
    orderBy: [ContractIndexDoublesOrderBy!] = PRIMARY_KEY_ASC
  ): ContractIndexDoublesEdge
}

"""
All input for the `updateContractIndexLongDoubleByBlockIndexAndPresentAndCodeAndScopeAndTableAndLongDoublePkey` mutation.
"""
input UpdateContractIndexLongDoubleByBlockIndexAndPresentAndCodeAndScopeAndTableAndLongDoublePkeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ContractIndexLongDouble` being updated.
  """
  contractIndexLongDoublePatch: ContractIndexLongDoublePatch!
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  longDoublePkey: BigFloat!
}

"""All input for the `updateContractIndexLongDouble` mutation."""
input UpdateContractIndexLongDoubleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ContractIndexLongDouble` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ContractIndexLongDouble` being updated.
  """
  contractIndexLongDoublePatch: ContractIndexLongDoublePatch!
}

"""The output of our update `ContractIndexLongDouble` mutation."""
type UpdateContractIndexLongDoublePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContractIndexLongDouble` that was updated by this mutation."""
  contractIndexLongDouble: ContractIndexLongDouble

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContractIndexLongDouble`. May be used by Relay 1."""
  contractIndexLongDoubleEdge(
    """The method to use when ordering `ContractIndexLongDouble`."""
    orderBy: [ContractIndexLongDoublesOrderBy!] = PRIMARY_KEY_ASC
  ): ContractIndexLongDoublesEdge
}

"""
All input for the `updateContractRowByBlockIndexAndPresentAndCodeAndScopeAndTableAndCrowPkey` mutation.
"""
input UpdateContractRowByBlockIndexAndPresentAndCodeAndScopeAndTableAndCrowPkeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ContractRow` being updated.
  """
  contractRowPatch: ContractRowPatch!
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
  crowPkey: BigFloat!
}

"""All input for the `updateContractRow` mutation."""
input UpdateContractRowInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ContractRow` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ContractRow` being updated.
  """
  contractRowPatch: ContractRowPatch!
}

"""The output of our update `ContractRow` mutation."""
type UpdateContractRowPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContractRow` that was updated by this mutation."""
  contractRow: ContractRow

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContractRow`. May be used by Relay 1."""
  contractRowEdge(
    """The method to use when ordering `ContractRow`."""
    orderBy: [ContractRowsOrderBy!] = PRIMARY_KEY_ASC
  ): ContractRowsEdge
}

"""
All input for the `updateContractTableByBlockIndexAndPresentAndCodeAndScopeAndTable` mutation.
"""
input UpdateContractTableByBlockIndexAndPresentAndCodeAndScopeAndTableInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ContractTable` being updated.
  """
  contractTablePatch: ContractTablePatch!
  blockIndex: BigInt!
  present: Boolean!
  code: String!
  scope: String!
  table: String!
}

"""All input for the `updateContractTable` mutation."""
input UpdateContractTableInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ContractTable` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ContractTable` being updated.
  """
  contractTablePatch: ContractTablePatch!
}

"""The output of our update `ContractTable` mutation."""
type UpdateContractTablePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ContractTable` that was updated by this mutation."""
  contractTable: ContractTable

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ContractTable`. May be used by Relay 1."""
  contractTableEdge(
    """The method to use when ordering `ContractTable`."""
    orderBy: [ContractTablesOrderBy!] = PRIMARY_KEY_ASC
  ): ContractTablesEdge
}

"""
All input for the `updateGeneratedTransactionByBlockIndexAndPresentAndSenderAndSenderId` mutation.
"""
input UpdateGeneratedTransactionByBlockIndexAndPresentAndSenderAndSenderIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GeneratedTransaction` being updated.
  """
  generatedTransactionPatch: GeneratedTransactionPatch!
  blockIndex: BigInt!
  present: Boolean!
  sender: String!
  senderId: BigFloat!
}

"""All input for the `updateGeneratedTransaction` mutation."""
input UpdateGeneratedTransactionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GeneratedTransaction` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `GeneratedTransaction` being updated.
  """
  generatedTransactionPatch: GeneratedTransactionPatch!
}

"""The output of our update `GeneratedTransaction` mutation."""
type UpdateGeneratedTransactionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GeneratedTransaction` that was updated by this mutation."""
  generatedTransaction: GeneratedTransaction

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `GeneratedTransaction`. May be used by Relay 1."""
  generatedTransactionEdge(
    """The method to use when ordering `GeneratedTransaction`."""
    orderBy: [GeneratedTransactionsOrderBy!] = PRIMARY_KEY_ASC
  ): GeneratedTransactionsEdge
}

"""
All input for the `updateGlobalPropertyByBlockIndexAndPresent` mutation.
"""
input UpdateGlobalPropertyByBlockIndexAndPresentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GlobalProperty` being updated.
  """
  globalPropertyPatch: GlobalPropertyPatch!
  blockIndex: BigInt!
  present: Boolean!
}

"""All input for the `updateGlobalProperty` mutation."""
input UpdateGlobalPropertyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GlobalProperty` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `GlobalProperty` being updated.
  """
  globalPropertyPatch: GlobalPropertyPatch!
}

"""The output of our update `GlobalProperty` mutation."""
type UpdateGlobalPropertyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GlobalProperty` that was updated by this mutation."""
  globalProperty: GlobalProperty

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `GlobalProperty`. May be used by Relay 1."""
  globalPropertyEdge(
    """The method to use when ordering `GlobalProperty`."""
    orderBy: [GlobalPropertiesOrderBy!] = PRIMARY_KEY_ASC
  ): GlobalPropertiesEdge
}

"""
All input for the `updatePermissionByBlockIndexAndPresentAndOwnerAndName` mutation.
"""
input UpdatePermissionByBlockIndexAndPresentAndOwnerAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Permission` being updated.
  """
  permissionPatch: PermissionPatch!
  blockIndex: BigInt!
  present: Boolean!
  owner: String!
  name: String!
}

"""All input for the `updatePermission` mutation."""
input UpdatePermissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Permission` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Permission` being updated.
  """
  permissionPatch: PermissionPatch!
}

"""
All input for the `updatePermissionLinkByBlockIndexAndPresentAndAccountAndCodeAndMessageType` mutation.
"""
input UpdatePermissionLinkByBlockIndexAndPresentAndAccountAndCodeAndMessageTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PermissionLink` being updated.
  """
  permissionLinkPatch: PermissionLinkPatch!
  blockIndex: BigInt!
  present: Boolean!
  account: String!
  code: String!
  messageType: String!
}

"""All input for the `updatePermissionLink` mutation."""
input UpdatePermissionLinkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PermissionLink` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `PermissionLink` being updated.
  """
  permissionLinkPatch: PermissionLinkPatch!
}

"""The output of our update `PermissionLink` mutation."""
type UpdatePermissionLinkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PermissionLink` that was updated by this mutation."""
  permissionLink: PermissionLink

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `PermissionLink`. May be used by Relay 1."""
  permissionLinkEdge(
    """The method to use when ordering `PermissionLink`."""
    orderBy: [PermissionLinksOrderBy!] = PRIMARY_KEY_ASC
  ): PermissionLinksEdge
}

"""The output of our update `Permission` mutation."""
type UpdatePermissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Permission` that was updated by this mutation."""
  permission: Permission

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Permission`. May be used by Relay 1."""
  permissionEdge(
    """The method to use when ordering `Permission`."""
    orderBy: [PermissionsOrderBy!] = PRIMARY_KEY_ASC
  ): PermissionsEdge
}

"""All input for the `updateReceivedBlockByBlockIndex` mutation."""
input UpdateReceivedBlockByBlockIndexInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ReceivedBlock` being updated.
  """
  receivedBlockPatch: ReceivedBlockPatch!
  blockIndex: BigInt!
}

"""All input for the `updateReceivedBlock` mutation."""
input UpdateReceivedBlockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReceivedBlock` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ReceivedBlock` being updated.
  """
  receivedBlockPatch: ReceivedBlockPatch!
}

"""The output of our update `ReceivedBlock` mutation."""
type UpdateReceivedBlockPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReceivedBlock` that was updated by this mutation."""
  receivedBlock: ReceivedBlock

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ReceivedBlock`. May be used by Relay 1."""
  receivedBlockEdge(
    """The method to use when ordering `ReceivedBlock`."""
    orderBy: [ReceivedBlocksOrderBy!] = PRIMARY_KEY_ASC
  ): ReceivedBlocksEdge
}

"""
All input for the `updateResourceLimitByBlockIndexAndPresentAndOwner` mutation.
"""
input UpdateResourceLimitByBlockIndexAndPresentAndOwnerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ResourceLimit` being updated.
  """
  resourceLimitPatch: ResourceLimitPatch!
  blockIndex: BigInt!
  present: Boolean!
  owner: String!
}

"""All input for the `updateResourceLimit` mutation."""
input UpdateResourceLimitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ResourceLimit` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ResourceLimit` being updated.
  """
  resourceLimitPatch: ResourceLimitPatch!
}

"""The output of our update `ResourceLimit` mutation."""
type UpdateResourceLimitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ResourceLimit` that was updated by this mutation."""
  resourceLimit: ResourceLimit

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ResourceLimit`. May be used by Relay 1."""
  resourceLimitEdge(
    """The method to use when ordering `ResourceLimit`."""
    orderBy: [ResourceLimitsOrderBy!] = PRIMARY_KEY_ASC
  ): ResourceLimitsEdge
}

"""
All input for the `updateResourceLimitsConfigByBlockIndexAndPresent` mutation.
"""
input UpdateResourceLimitsConfigByBlockIndexAndPresentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ResourceLimitsConfig` being updated.
  """
  resourceLimitsConfigPatch: ResourceLimitsConfigPatch!
  blockIndex: BigInt!
  present: Boolean!
}

"""All input for the `updateResourceLimitsConfig` mutation."""
input UpdateResourceLimitsConfigInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ResourceLimitsConfig` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ResourceLimitsConfig` being updated.
  """
  resourceLimitsConfigPatch: ResourceLimitsConfigPatch!
}

"""The output of our update `ResourceLimitsConfig` mutation."""
type UpdateResourceLimitsConfigPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ResourceLimitsConfig` that was updated by this mutation."""
  resourceLimitsConfig: ResourceLimitsConfig

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ResourceLimitsConfig`. May be used by Relay 1."""
  resourceLimitsConfigEdge(
    """The method to use when ordering `ResourceLimitsConfig`."""
    orderBy: [ResourceLimitsConfigsOrderBy!] = PRIMARY_KEY_ASC
  ): ResourceLimitsConfigsEdge
}

"""
All input for the `updateResourceLimitsStateByBlockIndexAndPresent` mutation.
"""
input UpdateResourceLimitsStateByBlockIndexAndPresentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ResourceLimitsState` being updated.
  """
  resourceLimitsStatePatch: ResourceLimitsStatePatch!
  blockIndex: BigInt!
  present: Boolean!
}

"""All input for the `updateResourceLimitsState` mutation."""
input UpdateResourceLimitsStateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ResourceLimitsState` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ResourceLimitsState` being updated.
  """
  resourceLimitsStatePatch: ResourceLimitsStatePatch!
}

"""The output of our update `ResourceLimitsState` mutation."""
type UpdateResourceLimitsStatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ResourceLimitsState` that was updated by this mutation."""
  resourceLimitsState: ResourceLimitsState

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ResourceLimitsState`. May be used by Relay 1."""
  resourceLimitsStateEdge(
    """The method to use when ordering `ResourceLimitsState`."""
    orderBy: [ResourceLimitsStatesOrderBy!] = PRIMARY_KEY_ASC
  ): ResourceLimitsStatesEdge
}

"""
All input for the `updateResourceUsageByBlockIndexAndPresentAndOwner` mutation.
"""
input UpdateResourceUsageByBlockIndexAndPresentAndOwnerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ResourceUsage` being updated.
  """
  resourceUsagePatch: ResourceUsagePatch!
  blockIndex: BigInt!
  present: Boolean!
  owner: String!
}

"""All input for the `updateResourceUsage` mutation."""
input UpdateResourceUsageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ResourceUsage` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ResourceUsage` being updated.
  """
  resourceUsagePatch: ResourceUsagePatch!
}

"""The output of our update `ResourceUsage` mutation."""
type UpdateResourceUsagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ResourceUsage` that was updated by this mutation."""
  resourceUsage: ResourceUsage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ResourceUsage`. May be used by Relay 1."""
  resourceUsageEdge(
    """The method to use when ordering `ResourceUsage`."""
    orderBy: [ResourceUsagesOrderBy!] = PRIMARY_KEY_ASC
  ): ResourceUsagesEdge
}

"""
All input for the `updateTransactionTraceByBlockIndexAndTransactionId` mutation.
"""
input UpdateTransactionTraceByBlockIndexAndTransactionIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TransactionTrace` being updated.
  """
  transactionTracePatch: TransactionTracePatch!
  blockIndex: BigInt!
  transactionId: String!
}

"""All input for the `updateTransactionTrace` mutation."""
input UpdateTransactionTraceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TransactionTrace` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `TransactionTrace` being updated.
  """
  transactionTracePatch: TransactionTracePatch!
}

"""The output of our update `TransactionTrace` mutation."""
type UpdateTransactionTracePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TransactionTrace` that was updated by this mutation."""
  transactionTrace: TransactionTrace

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TransactionTrace`. May be used by Relay 1."""
  transactionTraceEdge(
    """The method to use when ordering `TransactionTrace`."""
    orderBy: [TransactionTracesOrderBy!] = PRIMARY_KEY_ASC
  ): TransactionTracesEdge
}

type WaitWeight {
  waitSec: BigInt
  weight: Int
}

"""An input for mutations affecting `WaitWeight`"""
input WaitWeightInput {
  waitSec: BigInt
  weight: Int
}

